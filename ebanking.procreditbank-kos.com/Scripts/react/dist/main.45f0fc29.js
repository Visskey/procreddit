/*! For license information please see main.45f0fc29.js.LICENSE.txt */
(this.webpackChunkQuipu_Eba_WebUI=this.webpackChunkQuipu_Eba_WebUI||[]).push([[179],{342:(e,t,r)=>{"use strict";var n,o,i,a,s,c,u=r(294),l=r(935),p=r(762);!function(e){e.show="Show",e.hide="Hide",e.markAsRequired="MarkAsRequired",e.markAsOptional="MarkAsOptional"}(n||(n={})),function(e){e.equal="Equal",e.notEqual="NotEqual"}(o||(o={})),function(e){e.required="Required",e.regularExpression="RegularExpression",e.greaterThan="GreaterThan",e.greaterThanOrEqual="GreaterThanOrEqual",e.lowerThan="LowerThan",e.lowerThanOrEqual="LowerThanOrEqual",e.requiredIfAnyChanged="RequiredIfAnyChanged"}(i||(i={})),function(e){e.atLeastOneRequired="AtLeastOneRequired"}(a||(a={})),function(e){e.number="Number",e.text="Text",e.dateTime="DateTime",e.bit="Bit",e.phone="Phone",e.email="Email",e.selectList="SelectList",e.file="File",e.termsAndConditions="TermsAndConditions"}(s||(s={})),function(e){e.none="None",e.personalDataPI="PersonalDataPI",e.aMLDataPI="AMLDataPI",e.personalDataLE="PersonalDataLE",e.aMLDataLE="AMLDataLE"}(c||(c={}));const f=u.createContext({updateDataToSend:function(){},translations:[],datePickerFormat:"",antiForgeryToken:"",appPath:"",fileUploadValidation:{maxFileSize:0,supportedExtensions:""}});function d(e){if(null==e)return window;if("[object Window]"!==e.toString()){var t=e.ownerDocument;return t&&t.defaultView||window}return e}function h(e){return e instanceof d(e).Element||e instanceof Element}function m(e){return e instanceof d(e).HTMLElement||e instanceof HTMLElement}function y(e){return"undefined"!=typeof ShadowRoot&&(e instanceof d(e).ShadowRoot||e instanceof ShadowRoot)}var v=Math.round;function b(e,t){void 0===t&&(t=!1);var r=e.getBoundingClientRect(),n=1,o=1;if(m(e)&&t){var i=e.offsetHeight,a=e.offsetWidth;a>0&&(n=r.width/a||1),i>0&&(o=r.height/i||1)}return{width:v(r.width/n),height:v(r.height/o),top:v(r.top/o),right:v(r.right/n),bottom:v(r.bottom/o),left:v(r.left/n),x:v(r.left/n),y:v(r.top/o)}}function g(e){var t=d(e);return{scrollLeft:t.pageXOffset,scrollTop:t.pageYOffset}}function k(e){return e?(e.nodeName||"").toLowerCase():null}function O(e){return((h(e)?e.ownerDocument:e.document)||window.document).documentElement}function w(e){return b(O(e)).left+g(e).scrollLeft}function E(e){return d(e).getComputedStyle(e)}function x(e){var t=E(e),r=t.overflow,n=t.overflowX,o=t.overflowY;return/auto|scroll|overlay|hidden/.test(r+o+n)}function T(e,t,r){void 0===r&&(r=!1);var n,o,i=m(t),a=m(t)&&function(e){var t=e.getBoundingClientRect(),r=t.width/e.offsetWidth||1,n=t.height/e.offsetHeight||1;return 1!==r||1!==n}(t),s=O(t),c=b(e,a),u={scrollLeft:0,scrollTop:0},l={x:0,y:0};return(i||!i&&!r)&&(("body"!==k(t)||x(s))&&(u=(n=t)!==d(n)&&m(n)?{scrollLeft:(o=n).scrollLeft,scrollTop:o.scrollTop}:g(n)),m(t)?((l=b(t,!0)).x+=t.clientLeft,l.y+=t.clientTop):s&&(l.x=w(s))),{x:c.left+u.scrollLeft-l.x,y:c.top+u.scrollTop-l.y,width:c.width,height:c.height}}function S(e){var t=b(e),r=e.offsetWidth,n=e.offsetHeight;return Math.abs(t.width-r)<=1&&(r=t.width),Math.abs(t.height-n)<=1&&(n=t.height),{x:e.offsetLeft,y:e.offsetTop,width:r,height:n}}function C(e){return"html"===k(e)?e:e.assignedSlot||e.parentNode||(y(e)?e.host:null)||O(e)}function j(e){return["html","body","#document"].indexOf(k(e))>=0?e.ownerDocument.body:m(e)&&x(e)?e:j(C(e))}function D(e,t){var r;void 0===t&&(t=[]);var n=j(e),o=n===(null==(r=e.ownerDocument)?void 0:r.body),i=d(n),a=o?[i].concat(i.visualViewport||[],x(n)?n:[]):n,s=t.concat(a);return o?s:s.concat(D(C(a)))}function _(e){return["table","td","th"].indexOf(k(e))>=0}function P(e){return m(e)&&"fixed"!==E(e).position?e.offsetParent:null}function M(e){for(var t=d(e),r=P(e);r&&_(r)&&"static"===E(r).position;)r=P(r);return r&&("html"===k(r)||"body"===k(r)&&"static"===E(r).position)?t:r||function(e){var t=-1!==navigator.userAgent.toLowerCase().indexOf("firefox");if(-1!==navigator.userAgent.indexOf("Trident")&&m(e)&&"fixed"===E(e).position)return null;for(var r=C(e);m(r)&&["html","body"].indexOf(k(r))<0;){var n=E(r);if("none"!==n.transform||"none"!==n.perspective||"paint"===n.contain||-1!==["transform","perspective"].indexOf(n.willChange)||t&&"filter"===n.willChange||t&&n.filter&&"none"!==n.filter)return r;r=r.parentNode}return null}(e)||t}var N="top",R="bottom",A="right",V="left",I="auto",L=[N,R,A,V],F="start",q="end",B="viewport",U="popper",W=L.reduce((function(e,t){return e.concat([t+"-"+F,t+"-"+q])}),[]),H=[].concat(L,[I]).reduce((function(e,t){return e.concat([t,t+"-"+F,t+"-"+q])}),[]),z=["beforeRead","read","afterRead","beforeMain","main","afterMain","beforeWrite","write","afterWrite"];function J(e){var t=new Map,r=new Set,n=[];function o(e){r.add(e.name),[].concat(e.requires||[],e.requiresIfExists||[]).forEach((function(e){if(!r.has(e)){var n=t.get(e);n&&o(n)}})),n.push(e)}return e.forEach((function(e){t.set(e.name,e)})),e.forEach((function(e){r.has(e.name)||o(e)})),n}var Y={placement:"bottom",modifiers:[],strategy:"absolute"};function G(){for(var e=arguments.length,t=new Array(e),r=0;r<e;r++)t[r]=arguments[r];return!t.some((function(e){return!(e&&"function"==typeof e.getBoundingClientRect)}))}function K(e){void 0===e&&(e={});var t=e,r=t.defaultModifiers,n=void 0===r?[]:r,o=t.defaultOptions,i=void 0===o?Y:o;return function(e,t,r){void 0===r&&(r=i);var o,a,s={placement:"bottom",orderedModifiers:[],options:Object.assign({},Y,i),modifiersData:{},elements:{reference:e,popper:t},attributes:{},styles:{}},c=[],u=!1,l={state:s,setOptions:function(r){var o="function"==typeof r?r(s.options):r;p(),s.options=Object.assign({},i,s.options,o),s.scrollParents={reference:h(e)?D(e):e.contextElement?D(e.contextElement):[],popper:D(t)};var a,u,f=function(e){var t=J(e);return z.reduce((function(e,r){return e.concat(t.filter((function(e){return e.phase===r})))}),[])}((a=[].concat(n,s.options.modifiers),u=a.reduce((function(e,t){var r=e[t.name];return e[t.name]=r?Object.assign({},r,t,{options:Object.assign({},r.options,t.options),data:Object.assign({},r.data,t.data)}):t,e}),{}),Object.keys(u).map((function(e){return u[e]}))));return s.orderedModifiers=f.filter((function(e){return e.enabled})),s.orderedModifiers.forEach((function(e){var t=e.name,r=e.options,n=void 0===r?{}:r,o=e.effect;if("function"==typeof o){var i=o({state:s,name:t,instance:l,options:n});c.push(i||function(){})}})),l.update()},forceUpdate:function(){if(!u){var e=s.elements,t=e.reference,r=e.popper;if(G(t,r)){s.rects={reference:T(t,M(r),"fixed"===s.options.strategy),popper:S(r)},s.reset=!1,s.placement=s.options.placement,s.orderedModifiers.forEach((function(e){return s.modifiersData[e.name]=Object.assign({},e.data)}));for(var n=0;n<s.orderedModifiers.length;n++)if(!0!==s.reset){var o=s.orderedModifiers[n],i=o.fn,a=o.options,c=void 0===a?{}:a,p=o.name;"function"==typeof i&&(s=i({state:s,options:c,name:p,instance:l})||s)}else s.reset=!1,n=-1}}},update:(o=function(){return new Promise((function(e){l.forceUpdate(),e(s)}))},function(){return a||(a=new Promise((function(e){Promise.resolve().then((function(){a=void 0,e(o())}))}))),a}),destroy:function(){p(),u=!0}};if(!G(e,t))return l;function p(){c.forEach((function(e){return e()})),c=[]}return l.setOptions(r).then((function(e){!u&&r.onFirstUpdate&&r.onFirstUpdate(e)})),l}}var X={passive:!0};const Q={name:"eventListeners",enabled:!0,phase:"write",fn:function(){},effect:function(e){var t=e.state,r=e.instance,n=e.options,o=n.scroll,i=void 0===o||o,a=n.resize,s=void 0===a||a,c=d(t.elements.popper),u=[].concat(t.scrollParents.reference,t.scrollParents.popper);return i&&u.forEach((function(e){e.addEventListener("scroll",r.update,X)})),s&&c.addEventListener("resize",r.update,X),function(){i&&u.forEach((function(e){e.removeEventListener("scroll",r.update,X)})),s&&c.removeEventListener("resize",r.update,X)}},data:{}};function Z(e){return e.split("-")[0]}function ee(e){return e.split("-")[1]}function te(e){return["top","bottom"].indexOf(e)>=0?"x":"y"}function re(e){var t,r=e.reference,n=e.element,o=e.placement,i=o?Z(o):null,a=o?ee(o):null,s=r.x+r.width/2-n.width/2,c=r.y+r.height/2-n.height/2;switch(i){case N:t={x:s,y:r.y-n.height};break;case R:t={x:s,y:r.y+r.height};break;case A:t={x:r.x+r.width,y:c};break;case V:t={x:r.x-n.width,y:c};break;default:t={x:r.x,y:r.y}}var u=i?te(i):null;if(null!=u){var l="y"===u?"height":"width";switch(a){case F:t[u]=t[u]-(r[l]/2-n[l]/2);break;case q:t[u]=t[u]+(r[l]/2-n[l]/2)}}return t}const ne={name:"popperOffsets",enabled:!0,phase:"read",fn:function(e){var t=e.state,r=e.name;t.modifiersData[r]=re({reference:t.rects.reference,element:t.rects.popper,strategy:"absolute",placement:t.placement})},data:{}};var oe=Math.max,ie=Math.min,ae=Math.round,se={top:"auto",right:"auto",bottom:"auto",left:"auto"};function ce(e){var t,r=e.popper,n=e.popperRect,o=e.placement,i=e.variation,a=e.offsets,s=e.position,c=e.gpuAcceleration,u=e.adaptive,l=e.roundOffsets,p=!0===l?function(e){var t=e.x,r=e.y,n=window.devicePixelRatio||1;return{x:ae(ae(t*n)/n)||0,y:ae(ae(r*n)/n)||0}}(a):"function"==typeof l?l(a):a,f=p.x,h=void 0===f?0:f,m=p.y,y=void 0===m?0:m,v=a.hasOwnProperty("x"),b=a.hasOwnProperty("y"),g=V,k=N,w=window;if(u){var x=M(r),T="clientHeight",S="clientWidth";x===d(r)&&"static"!==E(x=O(r)).position&&"absolute"===s&&(T="scrollHeight",S="scrollWidth"),x=x,o!==N&&(o!==V&&o!==A||i!==q)||(k=R,y-=x[T]-n.height,y*=c?1:-1),o!==V&&(o!==N&&o!==R||i!==q)||(g=A,h-=x[S]-n.width,h*=c?1:-1)}var C,j=Object.assign({position:s},u&&se);return c?Object.assign({},j,((C={})[k]=b?"0":"",C[g]=v?"0":"",C.transform=(w.devicePixelRatio||1)<=1?"translate("+h+"px, "+y+"px)":"translate3d("+h+"px, "+y+"px, 0)",C)):Object.assign({},j,((t={})[k]=b?y+"px":"",t[g]=v?h+"px":"",t.transform="",t))}const ue={name:"applyStyles",enabled:!0,phase:"write",fn:function(e){var t=e.state;Object.keys(t.elements).forEach((function(e){var r=t.styles[e]||{},n=t.attributes[e]||{},o=t.elements[e];m(o)&&k(o)&&(Object.assign(o.style,r),Object.keys(n).forEach((function(e){var t=n[e];!1===t?o.removeAttribute(e):o.setAttribute(e,!0===t?"":t)})))}))},effect:function(e){var t=e.state,r={popper:{position:t.options.strategy,left:"0",top:"0",margin:"0"},arrow:{position:"absolute"},reference:{}};return Object.assign(t.elements.popper.style,r.popper),t.styles=r,t.elements.arrow&&Object.assign(t.elements.arrow.style,r.arrow),function(){Object.keys(t.elements).forEach((function(e){var n=t.elements[e],o=t.attributes[e]||{},i=Object.keys(t.styles.hasOwnProperty(e)?t.styles[e]:r[e]).reduce((function(e,t){return e[t]="",e}),{});m(n)&&k(n)&&(Object.assign(n.style,i),Object.keys(o).forEach((function(e){n.removeAttribute(e)})))}))}},requires:["computeStyles"]};var le={left:"right",right:"left",bottom:"top",top:"bottom"};function pe(e){return e.replace(/left|right|bottom|top/g,(function(e){return le[e]}))}var fe={start:"end",end:"start"};function de(e){return e.replace(/start|end/g,(function(e){return fe[e]}))}function he(e,t){var r=t.getRootNode&&t.getRootNode();if(e.contains(t))return!0;if(r&&y(r)){var n=t;do{if(n&&e.isSameNode(n))return!0;n=n.parentNode||n.host}while(n)}return!1}function me(e){return Object.assign({},e,{left:e.x,top:e.y,right:e.x+e.width,bottom:e.y+e.height})}function ye(e,t){return t===B?me(function(e){var t=d(e),r=O(e),n=t.visualViewport,o=r.clientWidth,i=r.clientHeight,a=0,s=0;return n&&(o=n.width,i=n.height,/^((?!chrome|android).)*safari/i.test(navigator.userAgent)||(a=n.offsetLeft,s=n.offsetTop)),{width:o,height:i,x:a+w(e),y:s}}(e)):m(t)?function(e){var t=b(e);return t.top=t.top+e.clientTop,t.left=t.left+e.clientLeft,t.bottom=t.top+e.clientHeight,t.right=t.left+e.clientWidth,t.width=e.clientWidth,t.height=e.clientHeight,t.x=t.left,t.y=t.top,t}(t):me(function(e){var t,r=O(e),n=g(e),o=null==(t=e.ownerDocument)?void 0:t.body,i=oe(r.scrollWidth,r.clientWidth,o?o.scrollWidth:0,o?o.clientWidth:0),a=oe(r.scrollHeight,r.clientHeight,o?o.scrollHeight:0,o?o.clientHeight:0),s=-n.scrollLeft+w(e),c=-n.scrollTop;return"rtl"===E(o||r).direction&&(s+=oe(r.clientWidth,o?o.clientWidth:0)-i),{width:i,height:a,x:s,y:c}}(O(e)))}function ve(e){return Object.assign({},{top:0,right:0,bottom:0,left:0},e)}function be(e,t){return t.reduce((function(t,r){return t[r]=e,t}),{})}function ge(e,t){void 0===t&&(t={});var r=t,n=r.placement,o=void 0===n?e.placement:n,i=r.boundary,a=void 0===i?"clippingParents":i,s=r.rootBoundary,c=void 0===s?B:s,u=r.elementContext,l=void 0===u?U:u,p=r.altBoundary,f=void 0!==p&&p,d=r.padding,y=void 0===d?0:d,v=ve("number"!=typeof y?y:be(y,L)),g=l===U?"reference":U,w=e.rects.popper,x=e.elements[f?g:l],T=function(e,t,r){var n="clippingParents"===t?function(e){var t=D(C(e)),r=["absolute","fixed"].indexOf(E(e).position)>=0&&m(e)?M(e):e;return h(r)?t.filter((function(e){return h(e)&&he(e,r)&&"body"!==k(e)})):[]}(e):[].concat(t),o=[].concat(n,[r]),i=o[0],a=o.reduce((function(t,r){var n=ye(e,r);return t.top=oe(n.top,t.top),t.right=ie(n.right,t.right),t.bottom=ie(n.bottom,t.bottom),t.left=oe(n.left,t.left),t}),ye(e,i));return a.width=a.right-a.left,a.height=a.bottom-a.top,a.x=a.left,a.y=a.top,a}(h(x)?x:x.contextElement||O(e.elements.popper),a,c),S=b(e.elements.reference),j=re({reference:S,element:w,strategy:"absolute",placement:o}),_=me(Object.assign({},w,j)),P=l===U?_:S,V={top:T.top-P.top+v.top,bottom:P.bottom-T.bottom+v.bottom,left:T.left-P.left+v.left,right:P.right-T.right+v.right},I=e.modifiersData.offset;if(l===U&&I){var F=I[o];Object.keys(V).forEach((function(e){var t=[A,R].indexOf(e)>=0?1:-1,r=[N,R].indexOf(e)>=0?"y":"x";V[e]+=F[r]*t}))}return V}const ke={name:"flip",enabled:!0,phase:"main",fn:function(e){var t=e.state,r=e.options,n=e.name;if(!t.modifiersData[n]._skip){for(var o=r.mainAxis,i=void 0===o||o,a=r.altAxis,s=void 0===a||a,c=r.fallbackPlacements,u=r.padding,l=r.boundary,p=r.rootBoundary,f=r.altBoundary,d=r.flipVariations,h=void 0===d||d,m=r.allowedAutoPlacements,y=t.options.placement,v=Z(y),b=c||(v!==y&&h?function(e){if(Z(e)===I)return[];var t=pe(e);return[de(e),t,de(t)]}(y):[pe(y)]),g=[y].concat(b).reduce((function(e,r){return e.concat(Z(r)===I?function(e,t){void 0===t&&(t={});var r=t,n=r.placement,o=r.boundary,i=r.rootBoundary,a=r.padding,s=r.flipVariations,c=r.allowedAutoPlacements,u=void 0===c?H:c,l=ee(n),p=l?s?W:W.filter((function(e){return ee(e)===l})):L,f=p.filter((function(e){return u.indexOf(e)>=0}));0===f.length&&(f=p);var d=f.reduce((function(t,r){return t[r]=ge(e,{placement:r,boundary:o,rootBoundary:i,padding:a})[Z(r)],t}),{});return Object.keys(d).sort((function(e,t){return d[e]-d[t]}))}(t,{placement:r,boundary:l,rootBoundary:p,padding:u,flipVariations:h,allowedAutoPlacements:m}):r)}),[]),k=t.rects.reference,O=t.rects.popper,w=new Map,E=!0,x=g[0],T=0;T<g.length;T++){var S=g[T],C=Z(S),j=ee(S)===F,D=[N,R].indexOf(C)>=0,_=D?"width":"height",P=ge(t,{placement:S,boundary:l,rootBoundary:p,altBoundary:f,padding:u}),M=D?j?A:V:j?R:N;k[_]>O[_]&&(M=pe(M));var q=pe(M),B=[];if(i&&B.push(P[C]<=0),s&&B.push(P[M]<=0,P[q]<=0),B.every((function(e){return e}))){x=S,E=!1;break}w.set(S,B)}if(E)for(var U=function(e){var t=g.find((function(t){var r=w.get(t);if(r)return r.slice(0,e).every((function(e){return e}))}));if(t)return x=t,"break"},z=h?3:1;z>0&&"break"!==U(z);z--);t.placement!==x&&(t.modifiersData[n]._skip=!0,t.placement=x,t.reset=!0)}},requiresIfExists:["offset"],data:{_skip:!1}};function Oe(e,t,r){return oe(e,ie(t,r))}function we(e,t,r){return void 0===r&&(r={x:0,y:0}),{top:e.top-t.height-r.y,right:e.right-t.width+r.x,bottom:e.bottom-t.height+r.y,left:e.left-t.width-r.x}}function Ee(e){return[N,A,R,V].some((function(t){return e[t]>=0}))}var xe=K({defaultModifiers:[Q,ne,{name:"computeStyles",enabled:!0,phase:"beforeWrite",fn:function(e){var t=e.state,r=e.options,n=r.gpuAcceleration,o=void 0===n||n,i=r.adaptive,a=void 0===i||i,s=r.roundOffsets,c=void 0===s||s,u={placement:Z(t.placement),variation:ee(t.placement),popper:t.elements.popper,popperRect:t.rects.popper,gpuAcceleration:o};null!=t.modifiersData.popperOffsets&&(t.styles.popper=Object.assign({},t.styles.popper,ce(Object.assign({},u,{offsets:t.modifiersData.popperOffsets,position:t.options.strategy,adaptive:a,roundOffsets:c})))),null!=t.modifiersData.arrow&&(t.styles.arrow=Object.assign({},t.styles.arrow,ce(Object.assign({},u,{offsets:t.modifiersData.arrow,position:"absolute",adaptive:!1,roundOffsets:c})))),t.attributes.popper=Object.assign({},t.attributes.popper,{"data-popper-placement":t.placement})},data:{}},ue,{name:"offset",enabled:!0,phase:"main",requires:["popperOffsets"],fn:function(e){var t=e.state,r=e.options,n=e.name,o=r.offset,i=void 0===o?[0,0]:o,a=H.reduce((function(e,r){return e[r]=function(e,t,r){var n=Z(e),o=[V,N].indexOf(n)>=0?-1:1,i="function"==typeof r?r(Object.assign({},t,{placement:e})):r,a=i[0],s=i[1];return a=a||0,s=(s||0)*o,[V,A].indexOf(n)>=0?{x:s,y:a}:{x:a,y:s}}(r,t.rects,i),e}),{}),s=a[t.placement],c=s.x,u=s.y;null!=t.modifiersData.popperOffsets&&(t.modifiersData.popperOffsets.x+=c,t.modifiersData.popperOffsets.y+=u),t.modifiersData[n]=a}},ke,{name:"preventOverflow",enabled:!0,phase:"main",fn:function(e){var t=e.state,r=e.options,n=e.name,o=r.mainAxis,i=void 0===o||o,a=r.altAxis,s=void 0!==a&&a,c=r.boundary,u=r.rootBoundary,l=r.altBoundary,p=r.padding,f=r.tether,d=void 0===f||f,h=r.tetherOffset,m=void 0===h?0:h,y=ge(t,{boundary:c,rootBoundary:u,padding:p,altBoundary:l}),v=Z(t.placement),b=ee(t.placement),g=!b,k=te(v),O="x"===k?"y":"x",w=t.modifiersData.popperOffsets,E=t.rects.reference,x=t.rects.popper,T="function"==typeof m?m(Object.assign({},t.rects,{placement:t.placement})):m,C={x:0,y:0};if(w){if(i||s){var j="y"===k?N:V,D="y"===k?R:A,_="y"===k?"height":"width",P=w[k],I=w[k]+y[j],L=w[k]-y[D],q=d?-x[_]/2:0,B=b===F?E[_]:x[_],U=b===F?-x[_]:-E[_],W=t.elements.arrow,H=d&&W?S(W):{width:0,height:0},z=t.modifiersData["arrow#persistent"]?t.modifiersData["arrow#persistent"].padding:{top:0,right:0,bottom:0,left:0},$=z[j],J=z[D],Y=Oe(0,E[_],H[_]),G=g?E[_]/2-q-Y-$-T:B-Y-$-T,K=g?-E[_]/2+q+Y+J+T:U+Y+J+T,X=t.elements.arrow&&M(t.elements.arrow),Q=X?"y"===k?X.clientTop||0:X.clientLeft||0:0,re=t.modifiersData.offset?t.modifiersData.offset[t.placement][k]:0,ne=w[k]+G-re-Q,ae=w[k]+K-re;if(i){var se=Oe(d?ie(I,ne):I,P,d?oe(L,ae):L);w[k]=se,C[k]=se-P}if(s){var ce="x"===k?N:V,ue="x"===k?R:A,le=w[O],pe=le+y[ce],fe=le-y[ue],de=Oe(d?ie(pe,ne):pe,le,d?oe(fe,ae):fe);w[O]=de,C[O]=de-le}}t.modifiersData[n]=C}},requiresIfExists:["offset"]},{name:"arrow",enabled:!0,phase:"main",fn:function(e){var t,r=e.state,n=e.name,o=e.options,i=r.elements.arrow,a=r.modifiersData.popperOffsets,s=Z(r.placement),c=te(s),u=[V,A].indexOf(s)>=0?"height":"width";if(i&&a){var l=function(e,t){return ve("number"!=typeof(e="function"==typeof e?e(Object.assign({},t.rects,{placement:t.placement})):e)?e:be(e,L))}(o.padding,r),p=S(i),f="y"===c?N:V,d="y"===c?R:A,h=r.rects.reference[u]+r.rects.reference[c]-a[c]-r.rects.popper[u],m=a[c]-r.rects.reference[c],y=M(i),v=y?"y"===c?y.clientHeight||0:y.clientWidth||0:0,b=h/2-m/2,g=l[f],k=v-p[u]-l[d],O=v/2-p[u]/2+b,w=Oe(g,O,k),E=c;r.modifiersData[n]=((t={})[E]=w,t.centerOffset=w-O,t)}},effect:function(e){var t=e.state,r=e.options.element,n=void 0===r?"[data-popper-arrow]":r;null!=n&&("string"!=typeof n||(n=t.elements.popper.querySelector(n)))&&he(t.elements.popper,n)&&(t.elements.arrow=n)},requires:["popperOffsets"],requiresIfExists:["preventOverflow"]},{name:"hide",enabled:!0,phase:"main",requiresIfExists:["preventOverflow"],fn:function(e){var t=e.state,r=e.name,n=t.rects.reference,o=t.rects.popper,i=t.modifiersData.preventOverflow,a=ge(t,{elementContext:"reference"}),s=ge(t,{altBoundary:!0}),c=we(a,n),u=we(s,o,i),l=Ee(c),p=Ee(u);t.modifiersData[r]={referenceClippingOffsets:c,popperEscapeOffsets:u,isReferenceHidden:l,hasPopperEscaped:p},t.attributes.popper=Object.assign({},t.attributes.popper,{"data-popper-reference-hidden":l,"data-popper-escaped":p})}}]}),Te="tippy-content",Se="tippy-arrow",Ce="tippy-svg-arrow",je={passive:!0,capture:!0};function De(e,t,r){if(Array.isArray(e)){var n=e[t];return null==n?Array.isArray(r)?r[t]:r:n}return e}function _e(e,t){var r={}.toString.call(e);return 0===r.indexOf("[object")&&r.indexOf(t+"]")>-1}function Pe(e,t){return"function"==typeof e?e.apply(void 0,t):e}function Me(e,t){return 0===t?e:function(n){clearTimeout(r),r=setTimeout((function(){e(n)}),t)};var r}function Ne(e){return[].concat(e)}function Re(e,t){-1===e.indexOf(t)&&e.push(t)}function Ae(e){return[].slice.call(e)}function Ve(){return document.createElement("div")}function Ie(e){return["Element","Fragment"].some((function(t){return _e(e,t)}))}function Le(e,t){e.forEach((function(e){e&&(e.style.transitionDuration=t+"ms")}))}function Fe(e,t){e.forEach((function(e){e&&e.setAttribute("data-state",t)}))}function qe(e,t,r){var n=t+"EventListener";["transitionend","webkitTransitionEnd"].forEach((function(t){e[n](t,r)}))}var Be={isTouch:!1},Ue=0;function We(){Be.isTouch||(Be.isTouch=!0,window.performance&&document.addEventListener("mousemove",He))}function He(){var e=performance.now();e-Ue<20&&(Be.isTouch=!1,document.removeEventListener("mousemove",He)),Ue=e}function ze(){var e,t=document.activeElement;if((e=t)&&e._tippy&&e._tippy.reference===e){var r=t._tippy;t.blur&&!r.state.isVisible&&t.blur()}}var $e="undefined"!=typeof window&&"undefined"!=typeof document?navigator.userAgent:"",Je=/MSIE |Trident\//.test($e),Ye=Object.assign({appendTo:function(){return document.body},aria:{content:"auto",expanded:"auto"},delay:0,duration:[300,250],getReferenceClientRect:null,hideOnClick:!0,ignoreAttributes:!1,interactive:!1,interactiveBorder:2,interactiveDebounce:0,moveTransition:"",offset:[0,10],onAfterUpdate:function(){},onBeforeUpdate:function(){},onCreate:function(){},onDestroy:function(){},onHidden:function(){},onHide:function(){},onMount:function(){},onShow:function(){},onShown:function(){},onTrigger:function(){},onUntrigger:function(){},onClickOutside:function(){},placement:"top",plugins:[],popperOptions:{},render:null,showOnCreate:!1,touch:!0,trigger:"mouseenter focus",triggerTarget:null},{animateFill:!1,followCursor:!1,inlinePositioning:!1,sticky:!1},{},{allowHTML:!1,animation:"fade",arrow:!0,content:"",inertia:!1,maxWidth:350,role:"tooltip",theme:"",zIndex:9999}),Ge=Object.keys(Ye);function Ke(e){var t=(e.plugins||[]).reduce((function(t,r){var n=r.name,o=r.defaultValue;return n&&(t[n]=void 0!==e[n]?e[n]:o),t}),{});return Object.assign({},e,{},t)}function Xe(e,t){var r=Object.assign({},t,{content:Pe(t.content,[e])},t.ignoreAttributes?{}:function(e,t){return(t?Object.keys(Ke(Object.assign({},Ye,{plugins:t}))):Ge).reduce((function(t,r){var n=(e.getAttribute("data-tippy-"+r)||"").trim();if(!n)return t;if("content"===r)t[r]=n;else try{t[r]=JSON.parse(n)}catch(e){t[r]=n}return t}),{})}(e,t.plugins));return r.aria=Object.assign({},Ye.aria,{},r.aria),r.aria={expanded:"auto"===r.aria.expanded?t.interactive:r.aria.expanded,content:"auto"===r.aria.content?t.interactive?null:"describedby":r.aria.content},r}function Qe(e,t){e.innerHTML=t}function Ze(e){var t=Ve();return!0===e?t.className=Se:(t.className=Ce,Ie(e)?t.appendChild(e):Qe(t,e)),t}function et(e,t){Ie(t.content)?(Qe(e,""),e.appendChild(t.content)):"function"!=typeof t.content&&(t.allowHTML?Qe(e,t.content):e.textContent=t.content)}function tt(e){var t=e.firstElementChild,r=Ae(t.children);return{box:t,content:r.find((function(e){return e.classList.contains(Te)})),arrow:r.find((function(e){return e.classList.contains(Se)||e.classList.contains(Ce)})),backdrop:r.find((function(e){return e.classList.contains("tippy-backdrop")}))}}function rt(e){var t=Ve(),r=Ve();r.className="tippy-box",r.setAttribute("data-state","hidden"),r.setAttribute("tabindex","-1");var n=Ve();function o(r,n){var o=tt(t),i=o.box,a=o.content,s=o.arrow;n.theme?i.setAttribute("data-theme",n.theme):i.removeAttribute("data-theme"),"string"==typeof n.animation?i.setAttribute("data-animation",n.animation):i.removeAttribute("data-animation"),n.inertia?i.setAttribute("data-inertia",""):i.removeAttribute("data-inertia"),i.style.maxWidth="number"==typeof n.maxWidth?n.maxWidth+"px":n.maxWidth,n.role?i.setAttribute("role",n.role):i.removeAttribute("role"),r.content===n.content&&r.allowHTML===n.allowHTML||et(a,e.props),n.arrow?s?r.arrow!==n.arrow&&(i.removeChild(s),i.appendChild(Ze(n.arrow))):i.appendChild(Ze(n.arrow)):s&&i.removeChild(s)}return n.className=Te,n.setAttribute("data-state","hidden"),et(n,e.props),t.appendChild(r),r.appendChild(n),o(e.props,e.props),{popper:t,onUpdate:o}}rt.$$tippy=!0;var nt=1,ot=[],it=[];function at(e,t){var r,n,o,i,a,s,c,u,l,p=Xe(e,Object.assign({},Ye,{},Ke((r=t,Object.keys(r).reduce((function(e,t){return void 0!==r[t]&&(e[t]=r[t]),e}),{}))))),f=!1,d=!1,h=!1,m=!1,y=[],v=Me(Y,p.interactiveDebounce),b=nt++,g=(l=p.plugins).filter((function(e,t){return l.indexOf(e)===t})),k={id:b,reference:e,popper:Ve(),popperInstance:null,props:p,state:{isEnabled:!0,isVisible:!1,isDestroyed:!1,isMounted:!1,isShown:!1},plugins:g,clearDelayTimeouts:function(){clearTimeout(n),clearTimeout(o),cancelAnimationFrame(i)},setProps:function(t){if(!k.state.isDestroyed){R("onBeforeUpdate",[k,t]),$();var r=k.props,n=Xe(e,Object.assign({},k.props,{},t,{ignoreAttributes:!0}));k.props=n,z(),r.interactiveDebounce!==n.interactiveDebounce&&(I(),v=Me(Y,n.interactiveDebounce)),r.triggerTarget&&!n.triggerTarget?Ne(r.triggerTarget).forEach((function(e){e.removeAttribute("aria-expanded")})):n.triggerTarget&&e.removeAttribute("aria-expanded"),V(),N(),E&&E(r,n),k.popperInstance&&(Q(),ee().forEach((function(e){requestAnimationFrame(e._tippy.popperInstance.forceUpdate)}))),R("onAfterUpdate",[k,t])}},setContent:function(e){k.setProps({content:e})},show:function(){var e=k.state.isVisible,t=k.state.isDestroyed,r=!k.state.isEnabled,n=Be.isTouch&&!k.props.touch,o=De(k.props.duration,0,Ye.duration);if(!(e||t||r||n||D().hasAttribute("disabled")||(R("onShow",[k],!1),!1===k.props.onShow(k)))){if(k.state.isVisible=!0,j()&&(w.style.visibility="visible"),N(),B(),k.state.isMounted||(w.style.transition="none"),j()){var i=P();Le([i.box,i.content],0)}var a,s,u;c=function(){var e;if(k.state.isVisible&&!m){if(m=!0,w.offsetHeight,w.style.transition=k.props.moveTransition,j()&&k.props.animation){var t=P(),r=t.box,n=t.content;Le([r,n],o),Fe([r,n],"visible")}A(),V(),Re(it,k),null==(e=k.popperInstance)||e.forceUpdate(),k.state.isMounted=!0,R("onMount",[k]),k.props.animation&&j()&&function(e,t){W(e,(function(){k.state.isShown=!0,R("onShown",[k])}))}(o)}},s=k.props.appendTo,u=D(),(a=k.props.interactive&&s===Ye.appendTo||"parent"===s?u.parentNode:Pe(s,[u])).contains(w)||a.appendChild(w),Q()}},hide:function(){var e=!k.state.isVisible,t=k.state.isDestroyed,r=!k.state.isEnabled,n=De(k.props.duration,1,Ye.duration);if(!(e||t||r)&&(R("onHide",[k],!1),!1!==k.props.onHide(k))){if(k.state.isVisible=!1,k.state.isShown=!1,m=!1,f=!1,j()&&(w.style.visibility="hidden"),I(),U(),N(),j()){var o=P(),i=o.box,a=o.content;k.props.animation&&(Le([i,a],n),Fe([i,a],"hidden"))}A(),V(),k.props.animation?j()&&function(e,t){W(e,(function(){!k.state.isVisible&&w.parentNode&&w.parentNode.contains(w)&&t()}))}(n,k.unmount):k.unmount()}},hideWithInteractivity:function(e){_().addEventListener("mousemove",v),Re(ot,v),v(e)},enable:function(){k.state.isEnabled=!0},disable:function(){k.hide(),k.state.isEnabled=!1},unmount:function(){k.state.isVisible&&k.hide(),k.state.isMounted&&(Z(),ee().forEach((function(e){e._tippy.unmount()})),w.parentNode&&w.parentNode.removeChild(w),it=it.filter((function(e){return e!==k})),k.state.isMounted=!1,R("onHidden",[k]))},destroy:function(){k.state.isDestroyed||(k.clearDelayTimeouts(),k.unmount(),$(),delete e._tippy,k.state.isDestroyed=!0,R("onDestroy",[k]))}};if(!p.render)return k;var O=p.render(k),w=O.popper,E=O.onUpdate;w.setAttribute("data-tippy-root",""),w.id="tippy-"+k.id,k.popper=w,e._tippy=k,w._tippy=k;var x=g.map((function(e){return e.fn(k)})),T=e.hasAttribute("aria-expanded");return z(),V(),N(),R("onCreate",[k]),p.showOnCreate&&te(),w.addEventListener("mouseenter",(function(){k.props.interactive&&k.state.isVisible&&k.clearDelayTimeouts()})),w.addEventListener("mouseleave",(function(e){k.props.interactive&&k.props.trigger.indexOf("mouseenter")>=0&&(_().addEventListener("mousemove",v),v(e))})),k;function S(){var e=k.props.touch;return Array.isArray(e)?e:[e,0]}function C(){return"hold"===S()[0]}function j(){var e;return!!(null==(e=k.props.render)?void 0:e.$$tippy)}function D(){return u||e}function _(){var e,t,r=D().parentNode;return r?(null==(t=Ne(r)[0])||null==(e=t.ownerDocument)?void 0:e.body)?t.ownerDocument:document:document}function P(){return tt(w)}function M(e){return k.state.isMounted&&!k.state.isVisible||Be.isTouch||a&&"focus"===a.type?0:De(k.props.delay,e?0:1,Ye.delay)}function N(){w.style.pointerEvents=k.props.interactive&&k.state.isVisible?"":"none",w.style.zIndex=""+k.props.zIndex}function R(e,t,r){var n;void 0===r&&(r=!0),x.forEach((function(r){r[e]&&r[e].apply(void 0,t)})),r&&(n=k.props)[e].apply(n,t)}function A(){var t=k.props.aria;if(t.content){var r="aria-"+t.content,n=w.id;Ne(k.props.triggerTarget||e).forEach((function(e){var t=e.getAttribute(r);if(k.state.isVisible)e.setAttribute(r,t?t+" "+n:n);else{var o=t&&t.replace(n,"").trim();o?e.setAttribute(r,o):e.removeAttribute(r)}}))}}function V(){!T&&k.props.aria.expanded&&Ne(k.props.triggerTarget||e).forEach((function(e){k.props.interactive?e.setAttribute("aria-expanded",k.state.isVisible&&e===D()?"true":"false"):e.removeAttribute("aria-expanded")}))}function I(){_().removeEventListener("mousemove",v),ot=ot.filter((function(e){return e!==v}))}function L(e){if(!(Be.isTouch&&(h||"mousedown"===e.type)||k.props.interactive&&w.contains(e.target))){if(D().contains(e.target)){if(Be.isTouch)return;if(k.state.isVisible&&k.props.trigger.indexOf("click")>=0)return}else R("onClickOutside",[k,e]);!0===k.props.hideOnClick&&(k.clearDelayTimeouts(),k.hide(),d=!0,setTimeout((function(){d=!1})),k.state.isMounted||U())}}function F(){h=!0}function q(){h=!1}function B(){var e=_();e.addEventListener("mousedown",L,!0),e.addEventListener("touchend",L,je),e.addEventListener("touchstart",q,je),e.addEventListener("touchmove",F,je)}function U(){var e=_();e.removeEventListener("mousedown",L,!0),e.removeEventListener("touchend",L,je),e.removeEventListener("touchstart",q,je),e.removeEventListener("touchmove",F,je)}function W(e,t){var r=P().box;function n(e){e.target===r&&(qe(r,"remove",n),t())}if(0===e)return t();qe(r,"remove",s),qe(r,"add",n),s=n}function H(t,r,n){void 0===n&&(n=!1),Ne(k.props.triggerTarget||e).forEach((function(e){e.addEventListener(t,r,n),y.push({node:e,eventType:t,handler:r,options:n})}))}function z(){var e;C()&&(H("touchstart",J,{passive:!0}),H("touchend",G,{passive:!0})),(e=k.props.trigger,e.split(/\s+/).filter(Boolean)).forEach((function(e){if("manual"!==e)switch(H(e,J),e){case"mouseenter":H("mouseleave",G);break;case"focus":H(Je?"focusout":"blur",K);break;case"focusin":H("focusout",K)}}))}function $(){y.forEach((function(e){var t=e.node,r=e.eventType,n=e.handler,o=e.options;t.removeEventListener(r,n,o)})),y=[]}function J(e){var t,r=!1;if(k.state.isEnabled&&!X(e)&&!d){var n="focus"===(null==(t=a)?void 0:t.type);a=e,u=e.currentTarget,V(),!k.state.isVisible&&_e(e,"MouseEvent")&&ot.forEach((function(t){return t(e)})),"click"===e.type&&(k.props.trigger.indexOf("mouseenter")<0||f)&&!1!==k.props.hideOnClick&&k.state.isVisible?r=!0:te(e),"click"===e.type&&(f=!r),r&&!n&&re(e)}}function Y(e){var t=e.target,r=D().contains(t)||w.contains(t);if("mousemove"!==e.type||!r){var n=ee().concat(w).map((function(e){var t,r=null==(t=e._tippy.popperInstance)?void 0:t.state;return r?{popperRect:e.getBoundingClientRect(),popperState:r,props:p}:null})).filter(Boolean);(function(e,t){var r=t.clientX,n=t.clientY;return e.every((function(e){var t=e.popperRect,o=e.popperState,i=e.props.interactiveBorder,a=o.placement.split("-")[0],s=o.modifiersData.offset;if(!s)return!0;var c="bottom"===a?s.top.y:0,u="top"===a?s.bottom.y:0,l="right"===a?s.left.x:0,p="left"===a?s.right.x:0,f=t.top-n+c>i,d=n-t.bottom-u>i,h=t.left-r+l>i,m=r-t.right-p>i;return f||d||h||m}))})(n,e)&&(I(),re(e))}}function G(e){X(e)||k.props.trigger.indexOf("click")>=0&&f||(k.props.interactive?k.hideWithInteractivity(e):re(e))}function K(e){k.props.trigger.indexOf("focusin")<0&&e.target!==D()||k.props.interactive&&e.relatedTarget&&w.contains(e.relatedTarget)||re(e)}function X(e){return!!Be.isTouch&&C()!==e.type.indexOf("touch")>=0}function Q(){Z();var t=k.props,r=t.popperOptions,n=t.placement,o=t.offset,i=t.getReferenceClientRect,a=t.moveTransition,s=j()?tt(w).arrow:null,u=i?{getBoundingClientRect:i,contextElement:i.contextElement||D()}:e,l=[{name:"offset",options:{offset:o}},{name:"preventOverflow",options:{padding:{top:2,bottom:2,left:5,right:5}}},{name:"flip",options:{padding:5}},{name:"computeStyles",options:{adaptive:!a}},{name:"$$tippy",enabled:!0,phase:"beforeWrite",requires:["computeStyles"],fn:function(e){var t=e.state;if(j()){var r=P().box;["placement","reference-hidden","escaped"].forEach((function(e){"placement"===e?r.setAttribute("data-placement",t.placement):t.attributes.popper["data-popper-"+e]?r.setAttribute("data-"+e,""):r.removeAttribute("data-"+e)})),t.attributes.popper={}}}}];j()&&s&&l.push({name:"arrow",options:{element:s,padding:3}}),l.push.apply(l,(null==r?void 0:r.modifiers)||[]),k.popperInstance=xe(u,w,Object.assign({},r,{placement:n,onFirstUpdate:c,modifiers:l}))}function Z(){k.popperInstance&&(k.popperInstance.destroy(),k.popperInstance=null)}function ee(){return Ae(w.querySelectorAll("[data-tippy-root]"))}function te(e){k.clearDelayTimeouts(),e&&R("onTrigger",[k,e]),B();var t=M(!0),r=S(),o=r[0],i=r[1];Be.isTouch&&"hold"===o&&i&&(t=i),t?n=setTimeout((function(){k.show()}),t):k.show()}function re(e){if(k.clearDelayTimeouts(),R("onUntrigger",[k,e]),k.state.isVisible){if(!(k.props.trigger.indexOf("mouseenter")>=0&&k.props.trigger.indexOf("click")>=0&&["mouseleave","mousemove"].indexOf(e.type)>=0&&f)){var t=M(!1);t?o=setTimeout((function(){k.state.isVisible&&k.hide()}),t):i=requestAnimationFrame((function(){k.hide()}))}}else U()}}function st(e,t){void 0===t&&(t={});var r=Ye.plugins.concat(t.plugins||[]);document.addEventListener("touchstart",We,je),window.addEventListener("blur",ze);var n,o=Object.assign({},t,{plugins:r}),i=(n=e,Ie(n)?[n]:function(e){return _e(e,"NodeList")}(n)?Ae(n):Array.isArray(n)?n:Ae(document.querySelectorAll(n))).reduce((function(e,t){var r=t&&at(t,o);return r&&e.push(r),e}),[]);return Ie(e)?i[0]:i}st.defaultProps=Ye,st.setDefaultProps=function(e){Object.keys(e).forEach((function(t){Ye[t]=e[t]}))},st.currentInput=Be,Object.assign({},ue,{effect:function(e){var t=e.state,r={popper:{position:t.options.strategy,left:"0",top:"0",margin:"0"},arrow:{position:"absolute"},reference:{}};Object.assign(t.elements.popper.style,r.popper),t.styles=r,t.elements.arrow&&Object.assign(t.elements.arrow.style,r.arrow)}}),st.setDefaultProps({render:rt});const ct=st;function ut(e,t){if(null==e)return{};var r,n,o={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}var lt="undefined"!=typeof window&&"undefined"!=typeof document;function pt(e,t){e&&("function"==typeof e&&e(t),{}.hasOwnProperty.call(e,"current")&&(e.current=t))}function ft(){return lt&&document.createElement("div")}function dt(e,t){if(e===t)return!0;if("object"==typeof e&&null!=e&&"object"==typeof t&&null!=t){if(Object.keys(e).length!==Object.keys(t).length)return!1;for(var r in e){if(!t.hasOwnProperty(r))return!1;if(!dt(e[r],t[r]))return!1}return!0}return!1}function ht(e){var t=[];return e.forEach((function(e){t.find((function(t){return dt(e,t)}))||t.push(e)})),t}var mt=lt?u.useLayoutEffect:u.useEffect;function yt(e,t,r){r.split(/\s+/).forEach((function(r){r&&e.classList[t](r)}))}var vt={name:"className",defaultValue:"",fn:function(e){var t=e.popper.firstElementChild,r=function(){var t;return!!(null==(t=e.props.render)?void 0:t.$$tippy)};function n(){e.props.className&&!r()||yt(t,"add",e.props.className)}return{onCreate:n,onBeforeUpdate:function(){r()&&yt(t,"remove",e.props.className)},onAfterUpdate:n}}};function bt(e){return function(t){var r,n,o=t.children,i=t.content,a=t.visible,s=t.singleton,c=t.render,p=t.reference,f=t.disabled,d=void 0!==f&&f,h=t.ignoreAttributes,m=void 0===h||h,y=(t.__source,t.__self,ut(t,["children","content","visible","singleton","render","reference","disabled","ignoreAttributes","__source","__self"])),v=void 0!==a,b=void 0!==s,g=(0,u.useState)(!1),k=g[0],O=g[1],w=(0,u.useState)({}),E=w[0],x=w[1],T=(0,u.useState)(),S=T[0],C=T[1],j=(r=function(){return{container:ft(),renders:1}},(n=(0,u.useRef)()).current||(n.current="function"==typeof r?r():r),n.current),D=Object.assign({ignoreAttributes:m},y,{content:j.container});v&&(D.trigger="manual",D.hideOnClick=!1),b&&(d=!0);var _=D,P=D.plugins||[];c&&(_=Object.assign({},D,{plugins:b?[].concat(P,[{fn:function(){return{onTrigger:function(e,t){var r=s.data.children.find((function(e){return e.instance.reference===t.currentTarget})).content;C(r)}}}}]):P,render:function(){return{popper:j.container}}}));var M=[p].concat(o?[o.type]:[]);return mt((function(){var t=p;p&&p.hasOwnProperty("current")&&(t=p.current);var r=e(t||j.ref||ft(),Object.assign({},_,{plugins:[vt].concat(D.plugins||[])}));return j.instance=r,d&&r.disable(),a&&r.show(),b&&s.hook({instance:r,content:i,props:_}),O(!0),function(){r.destroy(),null==s||s.cleanup(r)}}),M),mt((function(){var e,t,r,n,o;if(1!==j.renders){var c=j.instance;c.setProps((t=c.props,r=_,Object.assign({},r,{popperOptions:Object.assign({},t.popperOptions,r.popperOptions,{modifiers:ht([].concat((null==(n=t.popperOptions)?void 0:n.modifiers)||[],(null==(o=r.popperOptions)?void 0:o.modifiers)||[]))})}))),null==(e=c.popperInstance)||e.forceUpdate(),d?c.disable():c.enable(),v&&(a?c.show():c.hide()),b&&s.hook({instance:c,content:i,props:_})}else j.renders++})),mt((function(){var e;if(c){var t=j.instance;t.setProps({popperOptions:Object.assign({},t.props.popperOptions,{modifiers:[].concat(((null==(e=t.props.popperOptions)?void 0:e.modifiers)||[]).filter((function(e){return"$$tippyReact"!==e.name})),[{name:"$$tippyReact",enabled:!0,phase:"beforeWrite",requires:["computeStyles"],fn:function(e){var t,r=e.state,n=null==(t=r.modifiersData)?void 0:t.hide;E.placement===r.placement&&E.referenceHidden===(null==n?void 0:n.isReferenceHidden)&&E.escaped===(null==n?void 0:n.hasPopperEscaped)||x({placement:r.placement,referenceHidden:null==n?void 0:n.isReferenceHidden,escaped:null==n?void 0:n.hasPopperEscaped}),r.attributes.popper={}}}])})})}}),[E.placement,E.referenceHidden,E.escaped].concat(M)),u.createElement(u.Fragment,null,o?(0,u.cloneElement)(o,{ref:function(e){j.ref=e,pt(o.ref,e)}}):null,k&&(0,l.createPortal)(c?c(function(e){var t={"data-placement":e.placement};return e.referenceHidden&&(t["data-reference-hidden"]=""),e.escaped&&(t["data-escaped"]=""),t}(E),S,j.instance):i,j.container))}}var gt=function(e,t){return(0,u.forwardRef)((function(r,n){var o=r.children,i=ut(r,["children"]);return u.createElement(e,Object.assign({},t,i),o?(0,u.cloneElement)(o,{ref:function(e){pt(n,e),pt(o.ref,e)}}):null)}))};const kt=gt(bt(ct));var Ot=function(e,t){var r=t.replace(/[^a-zA-Z0-9]/g,"-"),n=e.toLowerCase().replace(/[^a-zA-Z0-9]/g,"-").split("-"),o=r.split("-"),i=n.indexOf("mm"),a=n.indexOf("dd"),s=n.indexOf("yyyy"),c=n.indexOf("hh"),u=n.indexOf("ii"),l=n.indexOf("ss"),p=new Date,f=s>-1?o[s]:p.getFullYear(),d=i>-1?o[i]-1:p.getMonth()-1,h=a>-1?o[a]:p.getDate(),m=c>-1?o[c]:p.getHours(),y=u>-1?o[u]:p.getMinutes(),v=l>-1?o[l]:p.getSeconds();return new Date(f,d,h,m,y,v)},wt=function(e,t,r){switch(e.baseType){case s.dateTime:var n=Ot(e.format,t),o=Ot(e.format,r.rule);switch(r.type){case i.greaterThan:return n<=o;case i.greaterThanOrEqual:return n<o;case i.lowerThan:return n>=o;case i.lowerThanOrEqual:return n>o;default:return!1}case s.number:var a=Number.parseInt(t),c=Number.parseInt(r.rule);switch(r.type){case i.greaterThan:return a<=c;case i.greaterThanOrEqual:return a<c;case i.lowerThan:return a>=c;case i.lowerThanOrEqual:return a>c;default:return!1}default:switch(r.type){case i.greaterThan:return t<=r.rule;case i.greaterThanOrEqual:return t<r.rule;case i.lowerThan:return t>=r.rule;case i.lowerThanOrEqual:return t>r.rule;default:return!1}}},Et=function(e,t,r,n){var o=e.brick;if(o.readOnly)return!1;if(!r.touched&&n.touched)return!0;if(r.hasErrors!==n.hasErrors)return!0;if(!e.touch&&t.touch)return!0;if(r.action!==n.action)return!0;var a=e.dataToValidate.firstOrDefault((function(t){return t.key===e.brick.key})),s=t.dataToValidate.firstOrDefault((function(e){return e.key===t.brick.key}));if(a.hasErrors!==s.hasErrors)return!0;if(a.action!==s.action)return!0;var c=o.validators.firstOrDefault((function(e){return e.type===i.requiredIfAnyChanged}));if(!c)return!1;var u=!1;return c.bricksForValidation.forEach((function(r){var n=e.dataToValidate.firstOrDefault((function(e){return e.key===r})),o=t.dataToValidate.firstOrDefault((function(e){return e.key===r}));n.isChanged!==o.isChanged&&(u=!0)})),u};const xt=function(e,t,r){var n=new Set,o=e.validators.firstOrDefault((function(e){return e.type===i.regularExpression}));o&&!new RegExp(o.rule.replace(/\\\\/g,"\\"),"i").test(t)&&""!==t&&n.add(o.errorMessage);var a=e.validators.firstOrDefault((function(e){return e.type===i.required}));a&&""===t&&n.add(a.errorMessage);var s=e.validators.firstOrDefault((function(e){return e.type===i.lowerThan}));s&&wt(e,t,s)&&n.add(s.errorMessage);var c=e.validators.firstOrDefault((function(e){return e.type===i.lowerThanOrEqual}));c&&wt(e,t,c)&&n.add(c.errorMessage);var u=e.validators.firstOrDefault((function(e){return e.type===i.greaterThan}));u&&wt(e,t,u)&&n.add(u.errorMessage);var l=e.validators.firstOrDefault((function(e){return e.type===i.greaterThanOrEqual}));l&&wt(e,t,l)&&n.add(l.errorMessage);var p=e.validators.firstOrDefault((function(e){return e.type===i.requiredIfAnyChanged}));if(p&&""===t){var f=!1;p.bricksForValidation.map((function(e){r.find((function(t){return t.key===e})).isChanged&&(f=!0)})),f&&n.add(p.errorMessage)}return n},Tt=function(e,t,r,n){if(r.value!==n.value)return!0;var o=e.dataToValidate.firstOrDefault((function(t){return t.key===e.brick.key})),i=t.dataToValidate.firstOrDefault((function(e){return e.key===t.brick.key}));return o.hasErrors!==i.hasErrors||Et(e,t,r,n)},St=Et,Ct=Ot,jt=function(e,t){return e+t.replace(/^\//,"")};function Dt(e){return Dt="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Dt(e)}function _t(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function Pt(e,t){return Pt=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e},Pt(e,t)}function Mt(e,t){if(t&&("object"===Dt(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return Nt(e)}function Nt(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function Rt(e){return Rt=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)},Rt(e)}function At(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}var Vt=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&Pt(e,t)}(c,e);var t,r,o,a,s=(o=c,a=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=Rt(o);if(a){var r=Rt(this).constructor;e=Reflect.construct(t,arguments,r)}else e=t.apply(this,arguments);return Mt(this,e)});function c(e){var t,r;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,c),At(Nt(r=s.call(this,e)),"context",void 0),At(Nt(r),"labelid",void 0),At(Nt(r),"emptyImgSrc",void 0),At(Nt(r),"previousNotSynchedValue",void 0),At(Nt(r),"tooltip",void 0);var n=r.props.dataToValidate.firstOrDefault((function(e){return e.key===r.props.brick.key})),o=null!==(t=r.props.brick.value)&&void 0!==t?t:"";r.previousNotSynchedValue=o,r.props.brick.previousModification&&r.props.brick.previousModification.Value&&(o=r.props.brick.previousModification.Value);var i=null;return n&&(i=n.action),n&&n.isChanged&&null!==n.value&&(o=n.value),r.state={value:o,label:"",touched:!1,hasErrors:!1,action:i},r.tooltip=u.createRef(),r.handleChange=r.handleChange.bind(Nt(r)),r.emptyImgSrc=jt(r.props.appPath,"/Content/Images/icons/img_trans.gif"),r}return t=c,(r=[{key:"componentDidUpdate",value:function(e,t){St(e,this.props,t,this.state)&&this.handleChange(this.state.value,e.touch!==this.props.touch)}},{key:"shouldComponentUpdate",value:function(e,t){return Tt(this.props,e,this.state,t)}},{key:"handleChange",value:function(e,t){var r=this,o=this.props.dataToValidate.firstOrDefault((function(e){return e.key===r.props.brick.key}));if(o.action===n.markAsRequired){var a=this.props.brick.validators.find((function(e){return e.type===i.required}));a?a.errorMessage=o.triggerMessage:this.props.brick.validators.push({type:i.required,rule:null,bricksForValidation:null,errorMessage:o.triggerMessage})}o.action===n.markAsOptional&&(this.props.brick.validators=this.props.brick.validators.filter((function(e){return e.type!==i.required})));var s=xt(this.props.brick,e,this.props.dataToValidate);this.setState({touched:!0,value:e,hasErrors:s.size>0||o&&o.hasErrors,label:"true"===e.toLowerCase()?this.context.translations.Yes:this.context.translations.No},(function(){return r.context.updateDataToSend(r.props.brick.key,{value:e,label:r.state.label},s,t)}))}},{key:"handleClickOutside",value:function(){this.tooltip.current._tippy.hide()}},{key:"render",value:function(){var e=this;return this.state.action===n.hide?null:u.createElement("div",{className:"l-section l-sectionReadonly"},u.createElement("div",{className:"l-sectionLeft"},u.createElement("span",{className:"l-section-text"},this.props.brick.previousModification&&u.createElement(kt,{trigger:"focus",arrow:!0,theme:"quipu",maxWidth:"225",delay:200,animation:"shift-away",hideOnClick:!1,content:this.context.translations.WarningUpdatePendingInField.replace("{0}",this.previousNotSynchedValue).replace("{1}",this.props.brick.previousModification.Value)},u.createElement("img",{src:this.emptyImgSrc,className:"pointer border0 imgWarning valignmiddle inline-ico",tabIndex:0})),u.createElement("label",{className:this.props.brick.readOnly?"readonly":"",htmlFor:this.props.brick.key},this.props.brick.title),this.props.brick.tooltip&&u.createElement(kt,{ref:this.tooltip,trigger:"focus",interactive:!0,arrow:!0,theme:"quipu",maxWidth:"225",delay:200,animation:"shift-away",hideOnClick:!1,content:u.createElement("span",{onClick:function(){return e.handleClickOutside()},dangerouslySetInnerHTML:{__html:this.props.brick.tooltip.replace("<a",'<a tabindex="-1"')}})},u.createElement("img",{src:this.emptyImgSrc,className:"pointer border0 tooltip-ico valignmiddle",tabIndex:0})))),u.createElement("div",{className:"l-sectionRight"},u.createElement("input",{id:this.props.brick.key,type:"checkbox",disabled:this.props.brick.readOnly,checked:"true"===this.state.value.toString().toLowerCase(),onChange:function(t){return e.handleChange(t.target.checked.toString(),!1)}}),this.state.touched&&this.state.hasErrors&&u.createElement("span",{className:"field-validation-error"},"*")))}}])&&_t(t.prototype,r),c}(u.Component);function It(e){return It="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},It(e)}function Lt(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function Ft(e,t){return Ft=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e},Ft(e,t)}function qt(e,t){if(t&&("object"===It(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return Bt(e)}function Bt(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function Ut(e){return Ut=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)},Ut(e)}function Wt(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}At(Vt,"contextType",f);var Ht=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&Ft(e,t)}(s,e);var t,r,o,i,a=(o=s,i=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=Ut(o);if(i){var r=Ut(this).constructor;e=Reflect.construct(t,arguments,r)}else e=t.apply(this,arguments);return qt(this,e)});function s(e){var t,r,n;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,s);var o=(n=a.call(this,e)).props.brick.options.find((function(e){return!e.value}));o?o.text=n.props.emptyDropdownLabel:n.props.brick.options.push({value:"",text:n.props.emptyDropdownLabel});var i=n.props.dataToValidate.firstOrDefault((function(e){return e.key===n.props.brick.key})),c=null!==(t=n.props.brick.value)&&void 0!==t?t:"",l=n.props.brick.options.find((function(e){return e.value===c}));n.previousNotSynchedValue=l&&l.value?l.text:"",n.props.brick.previousModification&&n.props.brick.previousModification.Value&&(c=n.props.brick.previousModification.Value,l=n.props.brick.options.find((function(e){return e.value===c})));var p=null;i&&(p=i.action),i&&i.isChanged&&null!==i.value&&(c=i.value,l=n.props.brick.options.find((function(e){return e.value===c})));var f=null!==(r=l&&l.value&&l.text)&&void 0!==r?r:"";return n.state={value:c,label:f,touched:!1,hasErrors:!1,action:p},n.handleChange=n.handleChange.bind(Bt(n)),n.selectFieldId=u.createRef(),n.tooltip=u.createRef(),n.emptyImgSrc=jt(n.props.appPath,"/Content/Images/icons/img_trans.gif"),n}return t=s,(r=[{key:"componentDidMount",value:function(){var e=this;this.props.brick.isSearchable&&$(this.selectFieldId.current).select2().on("select2:select",(function(t){e.handleChange(t.params.data.id,t.params.data.text,!1)}))}},{key:"componentDidUpdate",value:function(e,t){St(e,this.props,t,this.state)&&this.handleChange(this.state.value,this.state.label,e.touch!==this.props.touch)}},{key:"shouldComponentUpdate",value:function(e,t){return Tt(this.props,e,this.state,t)}},{key:"handleChange",value:function(e,t,r){var o=this,i=this.props.dataToValidate.firstOrDefault((function(e){return e.key===o.props.brick.key}));if(i.action===n.markAsRequired){var a=this.props.brick.validators.find((function(e){return e.type===BrickValidatorType.required}));a?a.errorMessage=i.triggerMessage:this.props.brick.validators.push({type:BrickValidatorType.required,rule:null,bricksForValidation:null,errorMessage:i.triggerMessage})}i.action===n.markAsOptional&&(this.props.brick.validators=this.props.brick.validators.filter((function(e){return e.type!==BrickValidatorType.required})));var s=xt(this.props.brick,e,this.props.dataToValidate);t=""===e?"":t,i.action===n.hide&&(e=this.props.brick.value,s=new Set),this.setState({action:i.action,touched:!0,value:e,hasErrors:s.size>0||i&&i.hasErrors,label:t},(function(){return o.context.updateDataToSend(o.props.brick.key,{value:e,label:t},s,r)}))}},{key:"handleClickOutside",value:function(){this.tooltip.current._tippy.hide()}},{key:"render",value:function(){var e=this;return this.state.action===n.hide?null:u.createElement("div",{className:"l-section l-sectionReadonly"},u.createElement("div",{className:"l-sectionLeft"},u.createElement("span",{className:"l-section-text"},this.props.brick.previousModification&&u.createElement(kt,{trigger:"focus",arrow:!0,theme:"quipu",maxWidth:"225",delay:200,animation:"shift-away",hideOnClick:!1,content:this.context.translations.WarningUpdatePendingInField.replace("{0}",this.previousNotSynchedValue).replace("{1}",this.props.brick.previousModification.LabelValue)},u.createElement("img",{src:this.emptyImgSrc,className:"pointer border0 imgWarning valignmiddle inline-ico",tabIndex:0})),u.createElement("label",{className:this.props.brick.readOnly?"readonly":"",htmlFor:this.props.brick.key},this.props.brick.title),this.props.brick.tooltip&&u.createElement(kt,{ref:this.tooltip,trigger:"focus",interactive:!0,arrow:!0,theme:"quipu",maxWidth:"225",delay:200,animation:"shift-away",hideOnClick:!1,content:u.createElement("span",{onClick:function(){return e.handleClickOutside()},dangerouslySetInnerHTML:{__html:this.props.brick.tooltip.replace("<a",'<a tabindex="-1"')}})},u.createElement("img",{src:this.emptyImgSrc,className:"pointer border0 tooltip-ico valignmiddle",tabIndex:0})))),u.createElement("div",{className:"l-sectionRight"},!this.props.brick.readOnly&&u.createElement("select",{id:this.props.brick.key,ref:this.selectFieldId,value:this.state.value,onChange:function(t){return e.handleChange(t.target.value,t.target.options[t.target.selectedIndex].text,!1)}},this.props.brick.options.sort((function(e,t){return e.value-t.value})).map((function(e,t){return u.createElement("option",{key:t,value:e.value},e.text)}))),this.props.brick.readOnly&&u.createElement("span",{className:"l-section-text"},this.state.label),this.state.touched&&this.state.hasErrors&&u.createElement("span",{className:"field-validation-error"},"*")))}}])&&Lt(t.prototype,r),s}(u.Component);function zt(e){return zt="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},zt(e)}function $t(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function Jt(e,t){return Jt=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e},Jt(e,t)}function Yt(e,t){if(t&&("object"===zt(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return Gt(e)}function Gt(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function Kt(e){return Kt=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)},Kt(e)}function Xt(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}Wt(Ht,"contextType",f),Wt(Ht,"previousNotSynchedValue",void 0);var Qt=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&Jt(e,t)}(c,e);var t,r,o,a,s=(o=c,a=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=Kt(o);if(a){var r=Kt(this).constructor;e=Reflect.construct(t,arguments,r)}else e=t.apply(this,arguments);return Yt(this,e)});function c(e){var t,r;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,c),Xt(Gt(r=s.call(this,e)),"context",void 0),Xt(Gt(r),"labelid",void 0),Xt(Gt(r),"emptyImgSrc",void 0),Xt(Gt(r),"previousNotSynchedValue",void 0),Xt(Gt(r),"tooltip",void 0);var n=r.props.dataToValidate.firstOrDefault((function(e){return e.key===r.props.brick.key})),o=null!==(t=r.props.brick.value)&&void 0!==t?t:"";r.previousNotSynchedValue=o,r.props.brick.previousModification&&r.props.brick.previousModification.Value&&(o=r.props.brick.previousModification.Value);var i=null;return n&&(i=n.action),n&&n.isChanged&&null!==n.value&&(o=n.value),r.state={value:o,label:"",touched:!1,hasErrors:!1,action:i},r.handleChange=r.handleChange.bind(Gt(r)),r.handleClickOutside=r.handleClickOutside.bind(Gt(r)),r.emptyImgSrc=jt(r.props.appPath,"/Content/Images/icons/img_trans.gif"),r.tooltip=u.createRef(),r}return t=c,(r=[{key:"componentDidUpdate",value:function(e,t){St(e,this.props,t,this.state)&&this.handleChange(this.state.value,e.touch!==this.props.touch)}},{key:"shouldComponentUpdate",value:function(e,t){return Tt(this.props,e,this.state,t)}},{key:"handleChange",value:function(e,t){var r=this,o=this.props.dataToValidate.firstOrDefault((function(e){return e.key===r.props.brick.key}));if(o.action===n.markAsRequired){var a=this.props.brick.validators.find((function(e){return e.type===i.required}));a?a.errorMessage=o.triggerMessage:this.props.brick.validators.push({type:i.required,rule:null,bricksForValidation:null,errorMessage:o.triggerMessage})}o.action===n.markAsOptional&&(this.props.brick.validators=this.props.brick.validators.filter((function(e){return e.type!==i.required})));var s=xt(this.props.brick,e,this.props.dataToValidate);o.action===n.hide&&(e=this.props.brick.value,s=new Set),this.setState({action:o.action,touched:!0,value:e,hasErrors:s.size>0||o&&o.hasErrors},(function(){return r.context.updateDataToSend(r.props.brick.key,e,s,t)}))}},{key:"handleClickOutside",value:function(){this.tooltip.current._tippy.hide()}},{key:"render",value:function(){var e=this;return this.state.action===n.hide?null:u.createElement("div",{className:"l-section l-sectionReadonly"},u.createElement("div",{className:"l-sectionLeft"},u.createElement("span",{className:"l-section-text"},this.props.brick.previousModification&&u.createElement(kt,{trigger:"focus",arrow:!0,theme:"quipu",maxWidth:"225",delay:200,animation:"shift-away",hideOnClick:!1,content:this.context.translations.WarningUpdatePendingInField.replace("{0}",this.previousNotSynchedValue).replace("{1}",this.props.brick.previousModification.Value)},u.createElement("img",{src:this.emptyImgSrc,className:"pointer border0 imgWarning valignmiddle inline-ico",tabIndex:0})),u.createElement("label",{className:this.props.brick.readOnly?"readonly":"",htmlFor:this.props.brick.key},this.props.brick.title),this.props.brick.tooltip&&u.createElement(kt,{ref:this.tooltip,trigger:"focus",interactive:!0,arrow:!0,theme:"quipu",maxWidth:"225",delay:200,animation:"shift-away",hideOnClick:!1,content:u.createElement("span",{tabIndex:-1,onClick:function(){return e.handleClickOutside()},dangerouslySetInnerHTML:{__html:this.props.brick.tooltip.replace("<a",'<a tabindex="-1"')}})},u.createElement("img",{src:this.emptyImgSrc,className:"pointer border0 tooltip-ico valignmiddle",tabIndex:0})))),u.createElement("div",{className:"l-sectionRight"},!this.props.brick.readOnly&&u.createElement("input",{id:this.props.brick.key,type:"text",value:this.state.value,onChange:function(t){return e.handleChange(t.target.value,!1)}}),this.props.brick.readOnly&&u.createElement("span",{className:"l-section-text"},this.state.value),this.state.touched&&this.state.hasErrors&&u.createElement("span",{className:"field-validation-error"},"*")))}}])&&$t(t.prototype,r),c}(u.Component);function Zt(e){return Zt="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Zt(e)}function er(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function tr(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?er(Object(r),!0).forEach((function(t){sr(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):er(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function rr(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function nr(e,t){return nr=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e},nr(e,t)}function or(e,t){if(t&&("object"===Zt(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return ir(e)}function ir(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function ar(e){return ar=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)},ar(e)}function sr(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}Xt(Qt,"contextType",f);var cr=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&nr(e,t)}(a,e);var t,r,n,o,i=(n=a,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=ar(n);if(o){var r=ar(this).constructor;e=Reflect.construct(t,arguments,r)}else e=t.apply(this,arguments);return or(this,e)});function a(e){var t;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,a),sr(ir(t=i.call(this,e)),"context",void 0),sr(ir(t),"labelid",void 0),sr(ir(t),"emptyImgSrc",void 0),sr(ir(t),"tooltip",void 0),t.props.brick.readOnly=!1,t.state={value:"",label:"",touched:!1,hasErrors:!1,action:null,checkboxInputs:[]},t.handleChange=t.handleChange.bind(ir(t)),t.emptyImgSrc=jt(t.props.appPath,"/Content/Images/icons/img_trans.gif"),t.tooltip=u.createRef(),t.props.brick.texts.filter((function(e){return e.nextToCheckbox})).forEach((function(){return t.state.checkboxInputs.push({touched:!1,checked:!1,ref:u.createRef()})})),t}return t=a,(r=[{key:"componentDidUpdate",value:function(e,t){var r=this;!e.touch&&this.props.touch?this.setState({checkboxInputs:this.state.checkboxInputs.map((function(e){return tr(tr({},e),{},{touched:!0})}))},(function(){return r.handleChange(null,!1)})):St(e,this.props,t,this.state)&&this.handleChange(null,!1)}},{key:"handleChange",value:function(e,t){var r=this;if(e){var n=this.state.checkboxInputs.find((function(t){return t.ref.current.id===e.target.id}));n.touched=!0,n.checked=e.target.checked}if(this.state.checkboxInputs.all((function(e){return e.touched}))){var o=this.state.checkboxInputs.all((function(e){return e.checked}))?"checked":"",i=xt(this.props.brick,o,this.props.dataToValidate),a=this.props.dataToValidate.firstOrDefault((function(e){return e.key===r.props.brick.key}));this.setState({touched:!0,value:o,hasErrors:i.size>0||a&&a.hasErrors,checkboxInputs:this.state.checkboxInputs},(function(){return r.context.updateDataToSend(r.props.brick.key,o,i,t)}))}}},{key:"handleClickOutside",value:function(){this.tooltip.current._tippy.hide()}},{key:"render",value:function(){var e=this,t=-1;return u.createElement(u.Fragment,null,u.createElement("div",{className:"l-section l-sectionReadonly"},this.props.brick.title,this.props.brick.tooltip&&u.createElement(kt,{trigger:"focus",interactive:!0,arrow:!0,theme:"quipu",maxWidth:"225",delay:200,animation:"shift-away",hideOnClick:!1,content:u.createElement("span",{onClick:function(){return e.handleClickOutside()},dangerouslySetInnerHTML:{__html:this.props.brick.tooltip.replace("<a",'<a tabindex="-1"')}})},u.createElement("img",{src:this.emptyImgSrc,className:"pointer border0 tooltip-ico valignmiddle",tabIndex:0}))),this.props.brick.texts.sort((function(e,t){return e.priority-t.priority})).map((function(r){return r.nextToCheckbox?(t++,u.createElement("div",{className:"l-section l-sectionReadonly",key:"checkboxinput"+r.priority},u.createElement("input",{className:"valignmiddle",type:"checkbox",id:"checkboxinput"+t,ref:e.state.checkboxInputs[t].ref,onChange:function(t){return e.handleChange(t,!1)}}),u.createElement("label",{htmlFor:"checkboxinput"+t,className:"valignmiddle accepttaclabel",dangerouslySetInnerHTML:{__html:r.text}}),e.state.touched&&e.state.hasErrors&&!e.state.checkboxInputs[t].checked&&u.createElement("span",{className:"field-validation-error"},"*"))):u.createElement("div",{className:"l-section l-sectionReadonly",key:"checkboxinput"+r.priority},u.createElement("div",{className:"divtextarea",dangerouslySetInnerHTML:{__html:r.text}}))})))}}])&&rr(t.prototype,r),a}(u.Component);function ur(e){return ur="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},ur(e)}function lr(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function pr(e,t){return pr=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e},pr(e,t)}function fr(e,t){if(t&&("object"===ur(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return dr(e)}function dr(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function hr(e){return hr=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)},hr(e)}function mr(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}sr(cr,"contextType",f);var yr,vr=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&pr(e,t)}(c,e);var t,r,o,a,s=(o=c,a=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=hr(o);if(a){var r=hr(this).constructor;e=Reflect.construct(t,arguments,r)}else e=t.apply(this,arguments);return fr(this,e)});function c(e){var t,r;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,c);var n=(r=s.call(this,e)).props.dataToValidate.firstOrDefault((function(e){return e.key===r.props.brick.key})),o=null!==(t=r.props.brick.value)&&void 0!==t?t:"";r.previousNotSynchedValue=o,r.props.brick.previousModification&&r.props.brick.previousModification.Value&&(o=r.props.brick.previousModification.Value);var i=null;return n&&(i=n.action),n&&n.isChanged&&null!==n.value&&(o=n.value),r.state={value:o,label:"",touched:!1,validationMessages:new Set,action:i},r.dateTimeField=u.createRef(),r.tooltip=u.createRef(),r.handleChange=r.handleChange.bind(dr(r)),r.labelHandler=r.labelHandler.bind(dr(r)),r.emptyImgSrc=jt(r.props.appPath,"/Content/Images/icons/img_trans.gif"),r}return t=c,(r=[{key:"componentDidMount",value:function(){var e=this,t=this.props.brick.validators.firstOrDefault((function(e){return e.type===i.lowerThan})),r=this.props.brick.validators.firstOrDefault((function(e){return e.type===i.lowerThanOrEqual})),n=null;if(t){var o=Ct(this.props.brick.format,t.rule);n=o.setDate(o.getDate()-1)}r&&(n=Ct(this.props.brick.format,r.rule));var a=this.props.brick.validators.firstOrDefault((function(e){return e.type===i.greaterThan})),s=this.props.brick.validators.firstOrDefault((function(e){return e.type===i.greaterThanOrEqual})),c=null;if(a){var u=Ct(this.props.brick.format,a.rule);c=u.setDate(u.getDate()+1)}s&&(c=Ct(this.props.brick.format,s.rule)),$(this.dateTimeField.current).datepicker({dateFormat:this.context.datePickerFormat,changeMonth:!0,changeYear:!0,minDate:c,maxDate:n,onSelect:function(t){e.handleChange(t,!1)}}),this.state.value&&($(e.dateTimeField.current).datepicker("setDate",Ct(this.props.brick.format,this.state.value)),this.setState({value:$(e.dateTimeField.current).val()},(function(){return e.context.updateDataToSend(e.props.brick.key,e.state.value,null,!1,!0)}))),$(e.dateTimeField.current).toggle(!this.props.brick.readOnly)}},{key:"componentDidUpdate",value:function(e,t){St(e,this.props,t,this.state)&&this.handleChange(this.state.value,e.touch!==this.props.touch)}},{key:"shouldComponentUpdate",value:function(e,t){return Tt(this.props,e,this.state,t)}},{key:"handleChange",value:function(e,t){var r=this,o=this.props.dataToValidate.firstOrDefault((function(e){return e.key===r.props.brick.key}));if(o.action===n.markAsRequired){var a=this.props.brick.validators.find((function(e){return e.type===i.required}));a?a.errorMessage=o.triggerMessage:this.props.brick.validators.push({type:i.required,rule:null,bricksForValidation:null,errorMessage:o.triggerMessage})}o.action===n.markAsOptional&&(this.props.brick.validators=this.props.brick.validators.filter((function(e){return e.type!==i.required})));var s,c=xt(this.props.brick,e,this.props.dataToValidate);if(e){var u=Ct(this.props.brick.format,e);s=u,!isNaN(s)&&s instanceof Date||c.add(this.context.translations.InvalidDate)}o.action===n.hide&&(e=this.props.brick.value,c=new Set),this.setState({touched:!0,value:e,hasErrors:c.size>0||o&&o.hasErrors},(function(){return r.context.updateDataToSend(r.props.brick.key,e,c,t)}))}},{key:"labelHandler",value:function(){this.props.brick.readOnly||$(this.dateTimeField.current).datepicker("show")}},{key:"handleClickOutside",value:function(){this.tooltip.current._tippy.hide()}},{key:"render",value:function(){var e=this;return this.state.action===n.hide?null:u.createElement("div",{className:"l-section l-sectionReadonly"},u.createElement("div",{className:"l-sectionLeft"},u.createElement("span",{className:"l-section-text"},this.props.brick.previousModification&&u.createElement(kt,{trigger:"focus",arrow:!0,theme:"quipu",maxWidth:"225",delay:200,animation:"shift-away",hideOnClick:!1,content:this.context.translations.WarningUpdatePendingInField.replace("{0}",this.previousNotSynchedValue).replace("{1}",this.props.brick.previousModification.Value)},u.createElement("img",{src:this.emptyImgSrc,className:"pointer border0 imgWarning valignmiddle inline-ico",tabIndex:0})),u.createElement("label",{className:this.props.brick.readOnly?"readonly":"",onClick:function(){return e.labelHandler()}},this.props.brick.title),this.props.brick.tooltip&&u.createElement(kt,{ref:this.tooltip,trigger:"focus",interactive:!0,arrow:!0,theme:"quipu",maxWidth:"225",delay:200,animation:"shift-away",hideOnClick:!1,content:u.createElement("span",{onClick:function(){return e.handleClickOutside()},dangerouslySetInnerHTML:{__html:this.props.brick.tooltip.replace("<a",'<a tabindex="-1"')}})},u.createElement("img",{src:this.state.emptyImgSrc,className:"pointer border0 tooltip-ico valignmiddle",tabIndex:0})))),u.createElement("div",{className:"l-sectionRight"},u.createElement("input",{type:"text",className:this.props.brick.readOnly?"is-hidden":"",onChange:function(t){return e.handleChange(t.target.value,!1)},ref:this.dateTimeField}),this.props.brick.readOnly&&u.createElement("span",{className:"l-section-text"},this.state.value),this.state.touched&&this.state.hasErrors>0&&u.createElement("span",{className:"field-validation-error"},"*")))}}])&&lr(t.prototype,r),c}(u.Component);mr(vr,"contextType",f),mr(vr,"previousNotSynchedValue",void 0);var br=new Uint8Array(16);function gr(){if(!yr&&!(yr="undefined"!=typeof crypto&&crypto.getRandomValues&&crypto.getRandomValues.bind(crypto)||"undefined"!=typeof msCrypto&&"function"==typeof msCrypto.getRandomValues&&msCrypto.getRandomValues.bind(msCrypto)))throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");return yr(br)}const kr=/^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i,Or=function(e){return"string"==typeof e&&kr.test(e)};for(var wr=[],Er=0;Er<256;++Er)wr.push((Er+256).toString(16).substr(1));const xr=function(e,t,r){var n=(e=e||{}).random||(e.rng||gr)();if(n[6]=15&n[6]|64,n[8]=63&n[8]|128,t){r=r||0;for(var o=0;o<16;++o)t[r+o]=n[o];return t}return function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,r=(wr[e[t+0]]+wr[e[t+1]]+wr[e[t+2]]+wr[e[t+3]]+"-"+wr[e[t+4]]+wr[e[t+5]]+"-"+wr[e[t+6]]+wr[e[t+7]]+"-"+wr[e[t+8]]+wr[e[t+9]]+"-"+wr[e[t+10]]+wr[e[t+11]]+wr[e[t+12]]+wr[e[t+13]]+wr[e[t+14]]+wr[e[t+15]]).toLowerCase();if(!Or(r))throw TypeError("Stringified UUID is invalid");return r}(n)};function Tr(e){return Tr="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Tr(e)}function Sr(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function Cr(e,t){return Cr=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e},Cr(e,t)}function jr(e,t){if(t&&("object"===Tr(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return Dr(e)}function Dr(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function _r(e){return _r=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)},_r(e)}function Pr(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}var Mr=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&Cr(e,t)}(a,e);var t,r,n,o,i=(n=a,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=_r(n);if(o){var r=_r(this).constructor;e=Reflect.construct(t,arguments,r)}else e=t.apply(this,arguments);return jr(this,e)});function a(e){var t;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,a),Pr(Dr(t=i.call(this,e)),"emptyImgSrc",void 0),Pr(Dr(t),"handleFileDeletion",(function(){t.props.handleFileDeletion(t.props.file)})),t.emptyImgSrc=jt(t.props.appPath,"/Content/Images/icons/img_trans.gif"),t}return t=a,(r=[{key:"render",value:function(){var e=this;return u.createElement("li",null,this.props.file.Name&&u.createElement("span",{className:this.props.file.ErrorMessage?"marginright field-validation-error":"marginright"},this.props.file.Name),this.props.file.ErrorMessage&&u.createElement("span",{className:"field-validation-error"},this.props.file.ErrorMessage),u.createElement("img",{src:this.emptyImgSrc,className:"imgDelete valignmiddle",onClick:function(){return e.handleFileDeletion()}}))}}])&&Sr(t.prototype,r),a}(u.Component);function Nr(e){return Nr="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Nr(e)}function Rr(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function Ar(e,t){return Ar=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e},Ar(e,t)}function Vr(e,t){if(t&&("object"===Nr(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return Ir(e)}function Ir(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function Lr(e){return Lr=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)},Lr(e)}function Fr(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}Pr(Mr,"contextType",f);var qr=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&Ar(e,t)}(c,e);var t,r,o,a,s=(o=c,a=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=Lr(o);if(a){var r=Lr(this).constructor;e=Reflect.construct(t,arguments,r)}else e=t.apply(this,arguments);return Vr(this,e)});function c(e){var t,r;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,c),Fr(Ir(r=s.call(this,e)),"context",void 0),Fr(Ir(r),"labelid",void 0),Fr(Ir(r),"emptyImgSrc",void 0),Fr(Ir(r),"isFileTypeSupported",void 0),Fr(Ir(r),"uploadUrl",void 0),Fr(Ir(r),"fileInput",void 0),Fr(Ir(r),"previousNotSynchedValue",void 0),Fr(Ir(r),"tooltip",void 0);var n=r.props.dataToValidate.firstOrDefault((function(e){return e.key===r.props.brick.key})),o=null!==(t=r.props.brick.value)&&void 0!==t?t:"";r.previousNotSynchedValue=o,r.props.brick.previousModification&&r.props.brick.previousModification.Value&&(o=r.props.brick.previousModification.Value);var i=null;return n&&(i=n.action),n&&n.isChanged&&null!==n.value&&(o=n.value),r.state={value:o,label:"",touched:!1,hasErrors:!1,files:o?JSON.parse(o):[],loadingFiles:!1,supportedFileTypes:[],action:i},r.fileInput=u.createRef(),r.tooltip=u.createRef(),r.handleFileDeletion=r.handleFileDeletion.bind(Ir(r)),r.handleFileUpload=r.handleFileUpload.bind(Ir(r)),r.handleChange=r.handleChange.bind(Ir(r)),r.uploadUrl=jt(r.props.appPath,"/File/UploadFile"),r.emptyImgSrc=jt(r.props.appPath,"/Content/Images/icons/img_trans.gif"),r.isFileTypeSupported=function(e){return r.state.supportedFileTypes.exist((function(t){return t===e}))},r}return t=c,(r=[{key:"componentDidMount",value:function(){this.setState({supportedFileTypes:[].concat.apply([],this.context.fileUploadValidation.supportedExtensions.split("|").map((function(e){return e.split(";")}))).map((function(e){return e.substring(e.indexOf("*")+2).replace(")","")}))})}},{key:"componentDidUpdate",value:function(e,t){St(e,this.props,t,this.state)&&this.handleChange(this.state.value,e.touch!==this.props.touch)}},{key:"shouldComponentUpdate",value:function(e,t){return this.state.loadingFiles!==t.loadingFiles||this.state.supportedFileTypes!==t.supportedFileTypes||Tt(this.props,e,this.state,t)}},{key:"handleFileDeletion",value:function(e){var t=this.state.files.filter((function(t){return t.UniqueName!==e.UniqueName}));this.handleChange(JSON.stringify(t),!1),this.setState({files:t})}},{key:"handleChange",value:function(e,t){var r=this,o=this.props.dataToValidate.firstOrDefault((function(e){return e.key===r.props.brick.key}));if(o.action===n.markAsRequired){var a=this.props.brick.validators.find((function(e){return e.type===i.required}));a?a.errorMessage=o.triggerMessage:this.props.brick.validators.push({type:i.required,rule:null,bricksForValidation:null,errorMessage:o.triggerMessage})}o.action===n.markAsOptional&&(this.props.brick.validators=this.props.brick.validators.filter((function(e){return e.type!==i.required})));var s=xt(this.props.brick,e,this.props.dataToValidate);if(e){var c=JSON.parse(e);c.filter((function(e){return e.ErrorMessage})).length>0?s.add(this.context.translations.FileUploadError):s.delete(this.context.translations.FileUploadError),c.any()||(e="")}xt(this.props.brick,e,this.props.dataToValidate).forEach((function(e){return s.add(e)})),o.action===n.hide&&(e=this.props.brick.value,s=new Set),this.setState({touched:!0,value:e,hasErrors:s.size>0||o&&o.hasErrors},(function(){return r.context.updateDataToSend(r.props.brick.key,e,s,t)}))}},{key:"handleFileUpload",value:function(){var e=this,t=new FormData;Array.from(this.fileInput.current.files).forEach((function(r,n){var o=r.name.substring(r.name.lastIndexOf(".")+1),i=!1;e.isFileTypeSupported(o)||(e.state.files.add({ErrorMessage:e.context.translations.FileTypeError,Name:r.name,ServerFileName:xr()}),i=!0),r.size>1024*e.context.fileUploadValidation.maxFileSize&&(e.state.files.add({ErrorMessage:e.context.translations.FileSizeError,Name:r.name,ServerFileName:xr()}),i=!0),i||t.append("file"+n,r)})),t.append("__RequestVerificationToken",this.context.antiForgeryToken.split('"')[5]),this.setState({loadingFiles:!0}),fetch(this.uploadUrl,{method:"POST",body:t}).then((function(t){200!==t.status?e.setState({loadingFiles:!1,files:[{Name:"",ErrorMessage:e.context.translations.SingleFileUploadError,UniqueName:xr()}]}):t.json().then((function(t){Array.from(t.files).forEach((function(t){t.IsMalware?e.state.files.add({ErrorMessage:e.context.translations.Infected,Name:t.Name,UniqueName:xr()}):(t.UniqueName=xr(),e.state.files.add(t))})),e.setState({files:e.state.files,loadingFiles:!1},(function(){return e.handleChange(JSON.stringify(e.state.files),!1)}))})),e.fileInput.current.blur()}))}},{key:"handleClickOutside",value:function(){this.tooltip.current._tippy.hide()}},{key:"render",value:function(){var e=this;return this.state.action===n.hide?null:u.createElement("div",{className:"l-section l-sectionReadonly"},u.createElement("div",{className:"l-sectionLeft"},u.createElement("span",{className:"l-section-text"},this.props.brick.previousModification&&u.createElement(kt,{trigger:"focus",arrow:!0,theme:"quipu",maxWidth:"225",delay:200,animation:"shift-away",hideOnClick:!1,content:this.context.translations.WarningUpdatePendingGeneric},u.createElement("img",{src:this.emptyImgSrc,className:"pointer border0 imgWarning valignmiddle inline-ico",tabIndex:0})),u.createElement("label",{className:this.props.brick.readOnly?"readonly":"",htmlFor:this.props.brick.key},this.props.brick.title),this.props.brick.tooltip&&u.createElement(kt,{ref:this.tooltip,trigger:"focus",interactive:!0,arrow:!0,theme:"quipu",maxWidth:"225",delay:200,animation:"shift-away",hideOnClick:!1,content:u.createElement("span",{onClick:function(){return e.handleClickOutside()},dangerouslySetInnerHTML:{__html:this.props.brick.tooltip.replace("<a",'<a tabindex="-1"')}})},u.createElement("img",{src:this.emptyImgSrc,className:"pointer border0 tooltip-ico valignmiddle",tabIndex:0})))),u.createElement("div",{className:"l-sectionRight"},u.createElement("ul",{className:"usuallist l-section-text vmediumseparationextramargin"},this.state.files.map((function(t){var r;return u.createElement(Mr,{key:null!==(r=t.UniqueName)&&void 0!==r?r:t.ServerFileName,file:t,handleFileDeletion:e.handleFileDeletion.bind(e),appPath:e.props.appPath})}))),u.createElement("input",{id:this.props.brick.key,type:"file",multiple:!0,className:"custominputfile",name:"files[]",ref:this.fileInput,onChange:this.handleFileUpload,accept:this.state.supportedFileTypes.map((function(e){return"."+e})).join(","),onClick:function(e){e.target.value=null}}),u.createElement("label",{className:this.state.loadingFiles?"loading marginright":"marginright",htmlFor:this.props.brick.key},this.context.translations.UploadFiles),this.state.touched&&this.state.hasErrors&&u.createElement("span",{className:"field-validation-error"},"*")))}}])&&Rr(t.prototype,r),c}(u.Component);function Br(e){return Br="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Br(e)}function Ur(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function Wr(e,t){return Wr=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e},Wr(e,t)}function Hr(e,t){if(t&&("object"===Br(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e)}function zr(e){return zr=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)},zr(e)}Fr(qr,"contextType",f);var $r=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&Wr(e,t)}(a,e);var t,r,n,o,i=(n=a,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=zr(n);if(o){var r=zr(this).constructor;e=Reflect.construct(t,arguments,r)}else e=t.apply(this,arguments);return Hr(this,e)});function a(e){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,a),i.call(this,e)}return t=a,(r=[{key:"render",value:function(){var e=this;return u.createElement("div",{className:"box-section extramargin"},this.props.group.title&&u.createElement("div",{className:"l-section l-sectionReadonlyHeader"},this.props.group.title),this.props.group.textBefore&&u.createElement("div",{className:"l-section l-sectionReadonly extrapadding"},this.props.group.textBefore),this.props.group.rows.map((function(t,r){return u.createElement("div",{key:"row"+r,className:t.bricks.length>1?"clientDataRow":"clientDatasRow"},t.bricks.map((function(t){return u.createElement(f.Consumer,{key:t.key},(function(r){switch(t.baseType){case s.file:return u.createElement(qr,{brick:t,dataToValidate:e.props.dataToValidate,touch:e.props.touchBricks,appPath:r.appPath});case s.dateTime:return u.createElement(vr,{brick:t,dataToValidate:e.props.dataToValidate,touch:e.props.touchBricks,appPath:r.appPath});case s.termsAndConditions:return u.createElement(cr,{brick:t,dataToValidate:e.props.dataToValidate,touch:e.props.touchBricks,appPath:r.appPath});case s.bit:return u.createElement(Vt,{brick:t,dataToValidate:e.props.dataToValidate,touch:e.props.touchBricks,appPath:r.appPath});case s.selectList:return u.createElement(Ht,{brick:t,dataToValidate:e.props.dataToValidate,touch:e.props.touchBricks,appPath:r.appPath,emptyDropdownLabel:r.translations.EmptyDropdownLabel});default:return u.createElement(Qt,{brick:t,dataToValidate:e.props.dataToValidate,touch:e.props.touchBricks,appPath:r.appPath})}}))})))})),this.props.group.textAfter&&u.createElement("div",{className:"l-section l-sectionReadonly extrapadding"},this.props.group.textAfter))}}])&&Ur(t.prototype,r),a}(u.Component);function Jr(e){return Jr="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Jr(e)}function Yr(e){return function(e){if(Array.isArray(e))return Gr(e)}(e)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(e)||function(e,t){if(e){if("string"==typeof e)return Gr(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);return"Object"===r&&e.constructor&&(r=e.constructor.name),"Map"===r||"Set"===r?Array.from(e):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?Gr(e,t):void 0}}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Gr(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=new Array(t);r<t;r++)n[r]=e[r];return n}function Kr(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function Xr(e,t){return Xr=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e},Xr(e,t)}function Qr(e,t){if(t&&("object"===Jr(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return Zr(e)}function Zr(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function en(e){return en=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)},en(e)}function tn(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}var rn=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&Xr(e,t)}(l,e);var t,r,n,i,c=(n=l,i=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=en(n);if(i){var r=en(this).constructor;e=Reflect.construct(t,arguments,r)}else e=t.apply(this,arguments);return Qr(this,e)});function l(e){var t;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,l),tn(Zr(t=c.call(this,e)),"data",void 0),tn(Zr(t),"delay",void 0),tn(Zr(t),"form",void 0),tn(Zr(t),"dataToSend",[]),tn(Zr(t),"originalListOfBricks",[]),t.data=JSON.parse(t.props.clientDataStructure);var r=t.data.validators,n=JSON.parse(t.props.translations),i=[];if(t.props.initialData){var p,f=JSON.parse(t.props.initialData);i=(p=[]).concat.apply(p,Yr(f.map((function(e){return e.ClientDataList}))))}var d=JSON.parse(t.props.pendingToUpdateFields);t.data.groups.forEach((function(e,r){var o={groupKey:"group"+r,title:e.title,clientDataList:[]};t.dataToSend.push(o),e.rows.forEach((function(e,a){return e.bricks.forEach((function(e,c){var u,l;t.originalListOfBricks.push(e);var p,f=!1;if(i.length>0){var h=i.firstOrDefault((function(t){return t.Key===e.key}));f=e.value!==h.Value,p=h.Value}var m,y="";if(e.baseType===s.selectList){var v=e.options.find((function(t){return t.value===e.value}));y=v&&v.text}e.baseType===s.bit&&(y="true"===e.value.toLowerCase()?n.Yes:n.No),d&&d.length>0&&(m=d.firstOrDefault((function(t){return t.Key===e.key}))),e.previousModification=m;var b={key:e.key,originalValue:null!==(u=e.value)&&void 0!==u?u:"",hasValidations:e.validators.length>0,value:null!==(l=p)&&void 0!==l?l:e.value,label:e.title,isChanged:f,labelValue:y,baseType:e.baseType,format:e.format,touched:!1,formErrors:new Set,position:Number.parseInt(r.toString()+a.toString()+c.toString()),hasErrors:!1,readOnly:e.readOnly,action:null,triggerMessage:null};o.clientDataList.push(b)}))}))}));var h=function(e,t){if(e)switch(e.operator){case o.equal:return t===e.value;case o.notEqual:return t!==e.value}return!1},m=[].concat.apply([],t.dataToSend.map((function(e){return e.clientDataList})));t.data.groups.forEach((function(e){e.rows.forEach((function(e){return e.bricks.forEach((function(e){e.triggers&&e.triggers.forEach((function(t){if(h(t,e.value)){var r=m.firstOrDefault((function(e){return e.key===t.brickKey}));r.action=t.action,r.triggerMessage=t.message}}))}))}))}));var y=m.map((function(e){return{key:e.key,value:e.value,hasErrors:!1,isChanged:e.isChanged,action:e.action,triggerMessage:e.triggerMessage}})),v={fileUploadValidation:t.props.fileUploadValidation,updateDataToSend:function(e,n,o,i){var c=arguments.length>4&&void 0!==arguments[4]&&arguments[4],u=[].concat.apply([],t.dataToSend.map((function(e){return e.clientDataList}))),l=u.firstOrDefault((function(t){return t.key===e}));if(l.formErrors=o,!c&&r){var p=r.firstOrDefault((function(t){return t.type===a.atLeastOneRequired&&t.bricksForValidation.exist((function(t){return t===e}))}));if(p){var f=!n||""===n;f&&p.bricksForValidation.where((function(t){return e!==t})).map((function(e){if(f){var t=u.firstOrDefault((function(t){return t.key===e}));t&&t.value&&""!==t.value&&(f=!1)}})),p.bricksForValidation.where((function(t){return e!==t})).forEach((function(e){var t=u.firstOrDefault((function(t){return t.key===e}));f?t.formErrors.add(p.errorMessage):t.formErrors.delete(p.errorMessage),t.touched=!0,t.hasErrors=t.formErrors.size>0})),f?l.formErrors.add(p.errorMessage):l.formErrors.delete(p.errorMessage)}}var d=n,m=n;d&&void 0!==d.value?(l.value=d.value,l.labelValue=d.label,c&&(l.originalValue=d.value)):(l.value=m,c&&(l.originalValue=m));var y=t.originalListOfBricks.firstOrDefault((function(t){return t.key===e}));y&&y.triggers&&y.triggers.forEach((function(e){if(h(e,l.value)){var t=u.firstOrDefault((function(t){return t.key===e.brickKey}));t.action=e.action,t.triggerMessage=e.message}})),c||(l.touched=!0),l.isChanged=l.originalValue!==l.value,l.hasErrors=l.formErrors&&l.formErrors.size>0,t.setState({dataToSend:Yr(t.dataToSend),dataToValidate:u.map((function(e){return{key:e.key,value:e.value,hasErrors:e.hasErrors,isChanged:e.isChanged,action:e.action,triggerMessage:e.triggerMessage}}))},(function(){var e;i&&(e=[]).concat.apply(e,Yr(t.state.dataToSend.map((function(e){return e.clientDataList})))).where((function(e){return!e.readOnly||e.baseType===s.termsAndConditions})).all((function(e){return e.touched&&0===e.formErrors.size}))&&t.form.current.submit()}))},datePickerFormat:t.props.datePickerFormat,antiForgeryToken:t.props.antiforgeryToken,translations:n,appPath:t.props.appPath},b=jt(t.props.appPath,"/CustomerData/Edit");return t.form=u.createRef(),t.state={dataToSend:t.dataToSend,dataToValidate:y,contextObject:v,postUrl:b,touchBricks:!1},t}return t=l,(r=[{key:"handleSubmit",value:function(e){this.state.touchBricks?this.form.current.submit():(e.preventDefault(),this.setState({touchBricks:!0}))}},{key:"render",value:function(){var e,t=this,r=new Set;return this.state.dataToSend&&(e=[].concat.apply([],this.state.dataToSend.map((function(e){return e.clientDataList}))).where((function(e){return e.formErrors&&e.formErrors.size>0}))).map((function(e){return Array.from(e.formErrors).forEach((function(e){return r.add(e)}))})),u.createElement(f.Provider,{value:this.state.contextObject},u.createElement("form",{ref:this.form,autoComplete:"off",action:this.state.postUrl,method:"POST",onSubmit:function(e){return t.handleSubmit(e)}},u.createElement("span",{dangerouslySetInnerHTML:{__html:this.props.antiforgeryToken}}),u.createElement("input",{type:"hidden",value:JSON.stringify(this.state.dataToSend),name:"inputModel.ClientDataJson"}),u.createElement("input",{type:"hidden",value:this.props.fieldGroup,name:"inputModel.FieldGroup"}),this.data.textBefore&&u.createElement("div",{className:"l-section"},this.data.textBefore),this.data.groups.map((function(e,r){return u.createElement($r,{group:e,key:"group"+r,touchBricks:t.state.touchBricks,dataToValidate:t.state.dataToValidate})})),!this.data.groups.all((function(e){return e.rows.all((function(e){return e.bricks.all((function(e){return e.readOnly}))}))}))&&u.createElement("div",{className:"l-section barseparator"},u.createElement("ul",{className:"horizontallist l-floatright"},u.createElement("li",null,u.createElement("input",{type:"submit",name:"closeButton",value:"Next",className:"btnClose",disabled:e.length>0}))),this.data.textAfter&&u.createElement("div",{className:"l-section"},this.data.textAfter),e.length>0&&u.createElement("div",{className:"validation-summary-errors"},u.createElement("span",null,this.state.contextObject.translations.ValidationSummary_Header),u.createElement("ul",null,Array.from(r).map((function(e,t){return u.createElement("li",{key:"error"+t},e)})))))))}}])&&Kr(t.prototype,r),l}(u.Component);r(891),function(e){function t(){var t=this||self;t.globalThis=t,delete e.prototype._T_}"object"!=typeof globalThis&&(this?t():(e.defineProperty(e.prototype,"_T_",{configurable:!0,get:t}),_T_))}(Object),globalThis,globalThis.React=u,globalThis.Components={RootComponent:rn},globalThis.ReactDOM=l,globalThis.ReactDOMServer=p},891:()=>{Array.prototype.firstOrDefault||(Array.prototype.firstOrDefault=function(e){for(var t=0;t<this.length;t++){var r=this[t];if(e(r))return r}return null}),Array.prototype.any||(Array.prototype.any=function(){return this.length>0}),Array.prototype.exist||(Array.prototype.exist=function(e){for(var t=0;t<this.length;t++)if(e(this[t]))return!0;return!1}),Array.prototype.all||(Array.prototype.all=function(e){for(var t=0;t<this.length;t++)if(!e(this[t]))return!1;return!0}),Array.prototype.where||(Array.prototype.where=function(e){for(var t=[],r=0;r<this.length;r++){var n=this[r];e(n)&&t.push(n)}return t}),Array.prototype.remove||(Array.prototype.remove=function(e){var t=this.indexOf(e);return t>=0&&(this.splice(t,1),!0)}),Array.prototype.removeRange||(Array.prototype.removeRange=function(e){for(var t=0;t<e.length;t++)this.remove(e[t])}),Array.prototype.add||(Array.prototype.add=function(e){this.push(e)}),Array.prototype.addRange||(Array.prototype.addRange=function(e){for(var t=0;t<e.length;t++)this.push(e[t])}),Array.prototype.orderBy||(Array.prototype.orderBy=function(e){for(var t=function(t,r){return e(t)>e(r)?1:e(r)>e(t)?-1:0},r=0;r<this.length;r++)return this.sort(t);return[]}),Array.prototype.orderByDescending||(Array.prototype.orderByDescending=function(e){for(var t=function(t,r){return e(t)>e(r)?-1:e(r)>e(t)?1:0},r=0;r<this.length;r++)return this.sort(t);return[]}),Array.prototype.orderByMany||(Array.prototype.orderByMany=function(e){for(var t=function(t,r){for(var n=0;n<e.length;n++){var o=e[n];if(o(t)>o(r))return 1;if(o(r)>o(t))return-1}return 0},r=0;r<this.length;r++)return this.sort(t);return[]}),Array.prototype.orderByManyDescending||(Array.prototype.orderByManyDescending=function(e){for(var t=function(t,r){for(var n=0;n<e.length;n++){var o=e[n];if(o(t)>o(r))return-1;if(o(r)>o(t))return 1}return 0},r=0;r<this.length;r++)return this.sort(t);return[]})},418:e=>{"use strict";var t=Object.getOwnPropertySymbols,r=Object.prototype.hasOwnProperty,n=Object.prototype.propertyIsEnumerable;function o(e){if(null==e)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(e)}e.exports=function(){try{if(!Object.assign)return!1;var e=new String("abc");if(e[5]="de","5"===Object.getOwnPropertyNames(e)[0])return!1;for(var t={},r=0;r<10;r++)t["_"+String.fromCharCode(r)]=r;if("0123456789"!==Object.getOwnPropertyNames(t).map((function(e){return t[e]})).join(""))return!1;var n={};return"abcdefghijklmnopqrst".split("").forEach((function(e){n[e]=e})),"abcdefghijklmnopqrst"===Object.keys(Object.assign({},n)).join("")}catch(e){return!1}}()?Object.assign:function(e,i){for(var a,s,c=o(e),u=1;u<arguments.length;u++){for(var l in a=Object(arguments[u]))r.call(a,l)&&(c[l]=a[l]);if(t){s=t(a);for(var p=0;p<s.length;p++)n.call(a,s[p])&&(c[s[p]]=a[s[p]])}}return c}},53:(e,t)=>{"use strict";var r,n,o,i;if("object"==typeof performance&&"function"==typeof performance.now){var a=performance;t.unstable_now=function(){return a.now()}}else{var s=Date,c=s.now();t.unstable_now=function(){return s.now()-c}}if("undefined"==typeof window||"function"!=typeof MessageChannel){var u=null,l=null,p=function(){if(null!==u)try{var e=t.unstable_now();u(!0,e),u=null}catch(e){throw setTimeout(p,0),e}};r=function(e){null!==u?setTimeout(r,0,e):(u=e,setTimeout(p,0))},n=function(e,t){l=setTimeout(e,t)},o=function(){clearTimeout(l)},t.unstable_shouldYield=function(){return!1},i=t.unstable_forceFrameRate=function(){}}else{var f=window.setTimeout,d=window.clearTimeout;if("undefined"!=typeof console){var h=window.cancelAnimationFrame;"function"!=typeof window.requestAnimationFrame&&console.error("This browser doesn't support requestAnimationFrame. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills"),"function"!=typeof h&&console.error("This browser doesn't support cancelAnimationFrame. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills")}var m=!1,y=null,v=-1,b=5,g=0;t.unstable_shouldYield=function(){return t.unstable_now()>=g},i=function(){},t.unstable_forceFrameRate=function(e){0>e||125<e?console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported"):b=0<e?Math.floor(1e3/e):5};var k=new MessageChannel,O=k.port2;k.port1.onmessage=function(){if(null!==y){var e=t.unstable_now();g=e+b;try{y(!0,e)?O.postMessage(null):(m=!1,y=null)}catch(e){throw O.postMessage(null),e}}else m=!1},r=function(e){y=e,m||(m=!0,O.postMessage(null))},n=function(e,r){v=f((function(){e(t.unstable_now())}),r)},o=function(){d(v),v=-1}}function w(e,t){var r=e.length;e.push(t);e:for(;;){var n=r-1>>>1,o=e[n];if(!(void 0!==o&&0<T(o,t)))break e;e[n]=t,e[r]=o,r=n}}function E(e){return void 0===(e=e[0])?null:e}function x(e){var t=e[0];if(void 0!==t){var r=e.pop();if(r!==t){e[0]=r;e:for(var n=0,o=e.length;n<o;){var i=2*(n+1)-1,a=e[i],s=i+1,c=e[s];if(void 0!==a&&0>T(a,r))void 0!==c&&0>T(c,a)?(e[n]=c,e[s]=r,n=s):(e[n]=a,e[i]=r,n=i);else{if(!(void 0!==c&&0>T(c,r)))break e;e[n]=c,e[s]=r,n=s}}}return t}return null}function T(e,t){var r=e.sortIndex-t.sortIndex;return 0!==r?r:e.id-t.id}var S=[],C=[],j=1,D=null,_=3,P=!1,M=!1,N=!1;function R(e){for(var t=E(C);null!==t;){if(null===t.callback)x(C);else{if(!(t.startTime<=e))break;x(C),t.sortIndex=t.expirationTime,w(S,t)}t=E(C)}}function A(e){if(N=!1,R(e),!M)if(null!==E(S))M=!0,r(V);else{var t=E(C);null!==t&&n(A,t.startTime-e)}}function V(e,r){M=!1,N&&(N=!1,o()),P=!0;var i=_;try{for(R(r),D=E(S);null!==D&&(!(D.expirationTime>r)||e&&!t.unstable_shouldYield());){var a=D.callback;if("function"==typeof a){D.callback=null,_=D.priorityLevel;var s=a(D.expirationTime<=r);r=t.unstable_now(),"function"==typeof s?D.callback=s:D===E(S)&&x(S),R(r)}else x(S);D=E(S)}if(null!==D)var c=!0;else{var u=E(C);null!==u&&n(A,u.startTime-r),c=!1}return c}finally{D=null,_=i,P=!1}}var I=i;t.unstable_IdlePriority=5,t.unstable_ImmediatePriority=1,t.unstable_LowPriority=4,t.unstable_NormalPriority=3,t.unstable_Profiling=null,t.unstable_UserBlockingPriority=2,t.unstable_cancelCallback=function(e){e.callback=null},t.unstable_continueExecution=function(){M||P||(M=!0,r(V))},t.unstable_getCurrentPriorityLevel=function(){return _},t.unstable_getFirstCallbackNode=function(){return E(S)},t.unstable_next=function(e){switch(_){case 1:case 2:case 3:var t=3;break;default:t=_}var r=_;_=t;try{return e()}finally{_=r}},t.unstable_pauseExecution=function(){},t.unstable_requestPaint=I,t.unstable_runWithPriority=function(e,t){switch(e){case 1:case 2:case 3:case 4:case 5:break;default:e=3}var r=_;_=e;try{return t()}finally{_=r}},t.unstable_scheduleCallback=function(e,i,a){var s=t.unstable_now();switch(a="object"==typeof a&&null!==a&&"number"==typeof(a=a.delay)&&0<a?s+a:s,e){case 1:var c=-1;break;case 2:c=250;break;case 5:c=1073741823;break;case 4:c=1e4;break;default:c=5e3}return e={id:j++,callback:i,priorityLevel:e,startTime:a,expirationTime:c=a+c,sortIndex:-1},a>s?(e.sortIndex=a,w(C,e),null===E(S)&&e===E(C)&&(N?o():N=!0,n(A,a-s))):(e.sortIndex=c,w(S,e),M||P||(M=!0,r(V))),e},t.unstable_wrapCallback=function(e){var t=_;return function(){var r=_;_=t;try{return e.apply(this,arguments)}finally{_=r}}}},840:(e,t,r)=>{"use strict";e.exports=r(53)}},e=>{e.O(0,[736],(()=>(342,e(e.s=342)))),e.O()}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,